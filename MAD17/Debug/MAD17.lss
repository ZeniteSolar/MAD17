
MAD17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00000c68  00000cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011e  0080017c  0080017c  00000d78  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004518  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017f7  00000000  00000000  000055f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169d  00000000  00000000  00006def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  0000848c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d7b  00000000  00000000  00008af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010f5  00000000  00000000  0000986f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000a964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_7>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_14>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_21>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
	...

00000088 <_mcp2515_cnf>:
  88:	04 b6 e7 04 b6 d3 04 b6 c7 04 b6 c3 02 90 07 03     ................
  98:	ac 81 03 ac 80 02 90 00                             ........

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	d8 e0       	ldi	r29, 0x08	; 8
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <wdt_first>:
/**
 * @brief Clear SREG_I on hardware reset.
 */
void wdt_first(void)
{
    MCUSR = 0; // clear reset flags
  ac:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	a8 95       	wdr
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b8:	88 61       	ori	r24, 0x18	; 24
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  c2:	0f be       	out	0x3f, r0	; 63

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	e8 e6       	ldi	r30, 0x68	; 104
  cc:	fc e0       	ldi	r31, 0x0C	; 12
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	ac 37       	cpi	r26, 0x7C	; 124
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	ac e7       	ldi	r26, 0x7C	; 124
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	aa 39       	cpi	r26, 0x9A	; 154
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 71 05 	call	0xae2	; 0xae2 <main>
  ee:	0c 94 32 06 	jmp	0xc64	; 0xc64 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_default>

000000f6 <mcp2515_write_register>:
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	1f 92       	push	r1
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	18 2f       	mov	r17, r24
 104:	2a 98       	cbi	0x05, 2	; 5
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	69 83       	std	Y+1, r22	; 0x01
 10a:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 10e:	81 2f       	mov	r24, r17
 110:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 114:	69 81       	ldd	r22, Y+1	; 0x01
 116:	86 2f       	mov	r24, r22
 118:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 11c:	2a 9a       	sbi	0x05, 2	; 5
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	08 95       	ret

00000128 <mcp2515_read_register>:
 128:	cf 93       	push	r28
 12a:	c8 2f       	mov	r28, r24
 12c:	2a 98       	cbi	0x05, 2	; 5
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 140:	2a 9a       	sbi	0x05, 2	; 5
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <mcp2515_bit_modify>:
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <mcp2515_bit_modify+0x8>
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	18 2f       	mov	r17, r24
 154:	2a 98       	cbi	0x05, 2	; 5
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	4a 83       	std	Y+2, r20	; 0x02
 15a:	69 83       	std	Y+1, r22	; 0x01
 15c:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 160:	81 2f       	mov	r24, r17
 162:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 166:	69 81       	ldd	r22, Y+1	; 0x01
 168:	86 2f       	mov	r24, r22
 16a:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 16e:	4a 81       	ldd	r20, Y+2	; 0x02
 170:	84 2f       	mov	r24, r20
 172:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 176:	2a 9a       	sbi	0x05, 2	; 5
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	08 95       	ret

00000184 <mcp2515_read_status>:
 184:	2a 98       	cbi	0x05, 2	; 5
 186:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 190:	2a 9a       	sbi	0x05, 2	; 5
 192:	08 95       	ret

00000194 <can_init>:
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	08 2f       	mov	r16, r24
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	10 f0       	brcs	.+4      	; 0x1aa <can_init+0x16>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	5f c0       	rjmp	.+190    	; 0x268 <can_init+0xd4>
 1aa:	2a 9a       	sbi	0x05, 2	; 5
 1ac:	22 9a       	sbi	0x04, 2	; 4
 1ae:	2d 98       	cbi	0x05, 5	; 5
 1b0:	2b 98       	cbi	0x05, 3	; 5
 1b2:	2c 98       	cbi	0x05, 4	; 5
 1b4:	25 9a       	sbi	0x04, 5	; 4
 1b6:	23 9a       	sbi	0x04, 3	; 4
 1b8:	24 98       	cbi	0x04, 4	; 4
 1ba:	0e 94 18 02 	call	0x430	; 0x430 <mcp2515_spi_init>
 1be:	2a 98       	cbi	0x05, 2	; 5
 1c0:	80 ec       	ldi	r24, 0xC0	; 192
 1c2:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 1c6:	8f e9       	ldi	r24, 0x9F	; 159
 1c8:	9f e0       	ldi	r25, 0x0F	; 15
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <can_init+0x36>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <can_init+0x3c>
 1d0:	00 00       	nop
 1d2:	2a 9a       	sbi	0x05, 2	; 5
 1d4:	8f e3       	ldi	r24, 0x3F	; 63
 1d6:	9c e9       	ldi	r25, 0x9C	; 156
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <can_init+0x44>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <can_init+0x4a>
 1de:	00 00       	nop
 1e0:	2a 98       	cbi	0x05, 2	; 5
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	e8 01       	movw	r28, r16
 1f2:	cc 0f       	add	r28, r28
 1f4:	dd 1f       	adc	r29, r29
 1f6:	c0 0f       	add	r28, r16
 1f8:	d1 1f       	adc	r29, r17
 1fa:	e1 2c       	mov	r14, r1
 1fc:	f1 2c       	mov	r15, r1
 1fe:	c8 57       	subi	r28, 0x78	; 120
 200:	df 4f       	sbci	r29, 0xFF	; 255
 202:	fe 01       	movw	r30, r28
 204:	ee 0d       	add	r30, r14
 206:	ff 1d       	adc	r31, r15
 208:	84 91       	lpm	r24, Z
 20a:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 20e:	9f ef       	ldi	r25, 0xFF	; 255
 210:	e9 1a       	sub	r14, r25
 212:	f9 0a       	sbc	r15, r25
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	e8 16       	cp	r14, r24
 218:	f1 04       	cpc	r15, r1
 21a:	99 f7       	brne	.-26     	; 0x202 <can_init+0x6e>
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 222:	2a 9a       	sbi	0x05, 2	; 5
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	0e 94 7b 00 	call	0xf6	; 0xf6 <mcp2515_write_register>
 22c:	20 98       	cbi	0x04, 0	; 4
 22e:	28 9a       	sbi	0x05, 0	; 5
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	8c e0       	ldi	r24, 0x0C	; 12
 234:	0e 94 7b 00 	call	0xf6	; 0xf6 <mcp2515_write_register>
 238:	89 e2       	ldi	r24, 0x29	; 41
 23a:	0e 94 94 00 	call	0x128	; 0x128 <mcp2515_read_register>
 23e:	d8 2f       	mov	r29, r24
 240:	f8 01       	movw	r30, r16
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	e0 0f       	add	r30, r16
 248:	f1 1f       	adc	r31, r17
 24a:	e7 57       	subi	r30, 0x77	; 119
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	c4 91       	lpm	r28, Z
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	0e 94 7b 00 	call	0xf6	; 0xf6 <mcp2515_write_register>
 258:	dc 13       	cpse	r29, r28
 25a:	a5 cf       	rjmp	.-182    	; 0x1a6 <can_init+0x12>
 25c:	8e e0       	ldi	r24, 0x0E	; 14
 25e:	0e 94 94 00 	call	0x128	; 0x128 <mcp2515_read_register>
 262:	80 7e       	andi	r24, 0xE0	; 224
 264:	d9 f7       	brne	.-10     	; 0x25c <can_init+0xc8>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	08 95       	ret

00000276 <can_check_message>:
 276:	83 b1       	in	r24, 0x03	; 3
 278:	80 95       	com	r24
 27a:	81 70       	andi	r24, 0x01	; 1
 27c:	08 95       	ret

0000027e <can_check_free_buffer>:
 27e:	80 ea       	ldi	r24, 0xA0	; 160
 280:	0e 94 c2 00 	call	0x184	; 0x184 <mcp2515_read_status>
 284:	98 2f       	mov	r25, r24
 286:	94 75       	andi	r25, 0x54	; 84
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	94 35       	cpi	r25, 0x54	; 84
 28c:	09 f4       	brne	.+2      	; 0x290 <can_check_free_buffer+0x12>
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret

00000292 <can_get_message>:
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
 2a2:	80 eb       	ldi	r24, 0xB0	; 176
 2a4:	0e 94 c2 00 	call	0x184	; 0x184 <mcp2515_read_status>
 2a8:	e8 2e       	mov	r14, r24
 2aa:	80 74       	andi	r24, 0x40	; 64
 2ac:	f8 2e       	mov	r15, r24
 2ae:	e6 fc       	sbrc	r14, 6
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <can_get_message+0x28>
 2b2:	e7 fe       	sbrs	r14, 7
 2b4:	43 c0       	rjmp	.+134    	; 0x33c <can_get_message+0xaa>
 2b6:	84 e9       	ldi	r24, 0x94	; 148
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <can_get_message+0x2a>
 2ba:	80 e9       	ldi	r24, 0x90	; 144
 2bc:	2a 98       	cbi	0x05, 2	; 5
 2be:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 2c2:	ce 01       	movw	r24, r28
 2c4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <mcp2515_read_id>
 2c8:	80 ff       	sbrs	r24, 0
 2ca:	0f c0       	rjmp	.+30     	; 0x2ea <can_get_message+0x58>
 2cc:	2a 9a       	sbi	0x05, 2	; 5
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	ff 20       	and	r15, r15
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <can_get_message+0x4e>
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	8c e2       	ldi	r24, 0x2C	; 44
 2d8:	0e 94 a3 00 	call	0x146	; 0x146 <mcp2515_bit_modify>
 2dc:	f1 2c       	mov	r15, r1
 2de:	2e c0       	rjmp	.+92     	; 0x33c <can_get_message+0xaa>
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	8c e2       	ldi	r24, 0x2C	; 44
 2e4:	0e 94 a3 00 	call	0x146	; 0x146 <mcp2515_bit_modify>
 2e8:	29 c0       	rjmp	.+82     	; 0x33c <can_get_message+0xaa>
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 2f0:	e3 fa       	bst	r14, 3
 2f2:	22 27       	eor	r18, r18
 2f4:	20 f9       	bld	r18, 0
 2f6:	9a 81       	ldd	r25, Y+2	; 0x02
 2f8:	20 fb       	bst	r18, 0
 2fa:	90 f9       	bld	r25, 0
 2fc:	9a 83       	std	Y+2, r25	; 0x02
 2fe:	8f 70       	andi	r24, 0x0F	; 15
 300:	d8 2e       	mov	r13, r24
 302:	8b 83       	std	Y+3, r24	; 0x03
 304:	00 e0       	ldi	r16, 0x00	; 0
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	0d 15       	cp	r16, r13
 30a:	50 f4       	brcc	.+20     	; 0x320 <can_get_message+0x8e>
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 312:	fe 01       	movw	r30, r28
 314:	e0 0f       	add	r30, r16
 316:	f1 1f       	adc	r31, r17
 318:	84 83       	std	Z+4, r24	; 0x04
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	f4 cf       	rjmp	.-24     	; 0x308 <can_get_message+0x76>
 320:	2a 9a       	sbi	0x05, 2	; 5
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	ff 20       	and	r15, r15
 326:	11 f0       	breq	.+4      	; 0x32c <can_get_message+0x9a>
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	01 c0       	rjmp	.+2      	; 0x32e <can_get_message+0x9c>
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	8c e2       	ldi	r24, 0x2C	; 44
 330:	0e 94 a3 00 	call	0x146	; 0x146 <mcp2515_bit_modify>
 334:	8e 2d       	mov	r24, r14
 336:	87 70       	andi	r24, 0x07	; 7
 338:	f8 2e       	mov	r15, r24
 33a:	f3 94       	inc	r15
 33c:	8f 2d       	mov	r24, r15
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	08 95       	ret

0000034e <can_static_filter>:
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
 358:	40 e8       	ldi	r20, 0x80	; 128
 35a:	60 ee       	ldi	r22, 0xE0	; 224
 35c:	8f e0       	ldi	r24, 0x0F	; 15
 35e:	0e 94 a3 00 	call	0x146	; 0x146 <mcp2515_bit_modify>
 362:	8e e0       	ldi	r24, 0x0E	; 14
 364:	0e 94 94 00 	call	0x128	; 0x128 <mcp2515_read_register>
 368:	80 7e       	andi	r24, 0xE0	; 224
 36a:	80 38       	cpi	r24, 0x80	; 128
 36c:	d1 f7       	brne	.-12     	; 0x362 <can_static_filter+0x14>
 36e:	64 e0       	ldi	r22, 0x04	; 4
 370:	80 e6       	ldi	r24, 0x60	; 96
 372:	0e 94 7b 00 	call	0xf6	; 0xf6 <mcp2515_write_register>
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	80 e7       	ldi	r24, 0x70	; 112
 37a:	0e 94 7b 00 	call	0xf6	; 0xf6 <mcp2515_write_register>
 37e:	10 e0       	ldi	r17, 0x00	; 0
 380:	2a 98       	cbi	0x05, 2	; 5
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 388:	81 2f       	mov	r24, r17
 38a:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 38e:	00 e0       	ldi	r16, 0x00	; 0
 390:	10 32       	cpi	r17, 0x20	; 32
 392:	11 f4       	brne	.+4      	; 0x398 <can_static_filter+0x4a>
 394:	08 30       	cpi	r16, 0x08	; 8
 396:	48 f4       	brcc	.+18     	; 0x3aa <can_static_filter+0x5c>
 398:	21 96       	adiw	r28, 0x01	; 1
 39a:	fe 01       	movw	r30, r28
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	84 91       	lpm	r24, Z
 3a0:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 3a4:	0f 5f       	subi	r16, 0xFF	; 255
 3a6:	0c 30       	cpi	r16, 0x0C	; 12
 3a8:	99 f7       	brne	.-26     	; 0x390 <can_static_filter+0x42>
 3aa:	2a 9a       	sbi	0x05, 2	; 5
 3ac:	10 5f       	subi	r17, 0xF0	; 240
 3ae:	10 33       	cpi	r17, 0x30	; 48
 3b0:	39 f7       	brne	.-50     	; 0x380 <can_static_filter+0x32>
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	60 ee       	ldi	r22, 0xE0	; 224
 3b6:	8f e0       	ldi	r24, 0x0F	; 15
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	0c 94 a3 00 	jmp	0x146	; 0x146 <mcp2515_bit_modify>

000003c4 <mcp2515_read_id>:
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	ec 01       	movw	r28, r24
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 3d2:	18 2f       	mov	r17, r24
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 3da:	98 2f       	mov	r25, r24
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	93 ff       	sbrs	r25, 3
 3e0:	07 c0       	rjmp	.+14     	; 0x3f0 <mcp2515_read_id+0x2c>
 3e2:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	0e 94 1d 02 	call	0x43a	; 0x43a <spi_putc>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	1c c0       	rjmp	.+56     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3f0:	8e bd       	out	0x2e, r24	; 46
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	18 9f       	mul	r17, r24
 3f6:	90 01       	movw	r18, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	39 83       	std	Y+1, r19	; 0x01
 3fc:	28 83       	st	Y, r18
 3fe:	0d b4       	in	r0, 0x2d	; 45
 400:	07 fe       	sbrs	r0, 7
 402:	fd cf       	rjmp	.-6      	; 0x3fe <mcp2515_read_id+0x3a>
 404:	8e b5       	in	r24, 0x2e	; 46
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	8e bd       	out	0x2e, r24	; 46
 40a:	88 81       	ld	r24, Y
 40c:	29 2f       	mov	r18, r25
 40e:	22 95       	swap	r18
 410:	26 95       	lsr	r18
 412:	27 70       	andi	r18, 0x07	; 7
 414:	82 2b       	or	r24, r18
 416:	88 83       	st	Y, r24
 418:	0d b4       	in	r0, 0x2d	; 45
 41a:	07 fe       	sbrs	r0, 7
 41c:	fd cf       	rjmp	.-6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41e:	8e b5       	in	r24, 0x2e	; 46
 420:	89 2f       	mov	r24, r25
 422:	80 71       	andi	r24, 0x10	; 16
 424:	94 fd       	sbrc	r25, 4
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	08 95       	ret

00000430 <mcp2515_spi_init>:
 430:	81 e5       	ldi	r24, 0x51	; 81
 432:	8c bd       	out	0x2c, r24	; 44
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	8d bd       	out	0x2d, r24	; 45
 438:	08 95       	ret

0000043a <spi_putc>:
 43a:	8e bd       	out	0x2e, r24	; 46
 43c:	0d b4       	in	r0, 0x2d	; 45
 43e:	07 fe       	sbrs	r0, 7
 440:	fd cf       	rjmp	.-6      	; 0x43c <spi_putc+0x2>
 442:	8e b5       	in	r24, 0x2e	; 46
 444:	08 95       	ret

00000446 <ma_adc0>:
 * Ma = (1/N)*Summation of x[i] from i=0 to N, 
 * if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
 *
 */
uint8_t ma_adc0(void)
{   
 446:	20 e2       	ldi	r18, 0x20	; 32
 448:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc0_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc0, i);
 44e:	ab e2       	ldi	r26, 0x2B	; 43
 450:	b2 e0       	ldi	r27, 0x02	; 2
 452:	4c 91       	ld	r20, X
 454:	f9 01       	movw	r30, r18
 456:	e4 0f       	add	r30, r20
 458:	f1 1d       	adc	r31, r1
 45a:	ef 71       	andi	r30, 0x1F	; 31
 45c:	ff 27       	eor	r31, r31
 45e:	e5 5d       	subi	r30, 0xD5	; 213
 460:	fd 4f       	sbci	r31, 0xFD	; 253
 462:	42 81       	ldd	r20, Z+2	; 0x02
 464:	84 0f       	add	r24, r20
 466:	91 1d       	adc	r25, r1
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	31 09       	sbc	r19, r1
 *
 */
uint8_t ma_adc0(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc0_SIZE; i; i--){
 46c:	91 f7       	brne	.-28     	; 0x452 <ma_adc0+0xc>
        sum += CBUF_Get(cbuf_adc0, i);
    }
    avg_adc0 = sum >> cbuf_adc0_SIZE_2;
 46e:	96 95       	lsr	r25
 470:	87 95       	ror	r24
 472:	92 95       	swap	r25
 474:	82 95       	swap	r24
 476:	8f 70       	andi	r24, 0x0F	; 15
 478:	89 27       	eor	r24, r25
 47a:	9f 70       	andi	r25, 0x0F	; 15
 47c:	89 27       	eor	r24, r25
 47e:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <avg_adc0>
    return avg_adc0;
}
 482:	08 95       	ret

00000484 <ma_adc1>:
* Ma = (1/N)*Summation of x[i] from i=0 to N, 
* if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
*
*/
uint8_t ma_adc1(void)
{   
 484:	20 e2       	ldi	r18, 0x20	; 32
 486:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc1_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc1, i);
 48c:	af e9       	ldi	r26, 0x9F	; 159
 48e:	b1 e0       	ldi	r27, 0x01	; 1
 490:	4c 91       	ld	r20, X
 492:	f9 01       	movw	r30, r18
 494:	e4 0f       	add	r30, r20
 496:	f1 1d       	adc	r31, r1
 498:	ef 71       	andi	r30, 0x1F	; 31
 49a:	ff 27       	eor	r31, r31
 49c:	e1 56       	subi	r30, 0x61	; 97
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
 4a0:	42 81       	ldd	r20, Z+2	; 0x02
 4a2:	84 0f       	add	r24, r20
 4a4:	91 1d       	adc	r25, r1
 4a6:	21 50       	subi	r18, 0x01	; 1
 4a8:	31 09       	sbc	r19, r1
*
*/
uint8_t ma_adc1(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc1_SIZE; i; i--){
 4aa:	91 f7       	brne	.-28     	; 0x490 <ma_adc1+0xc>
        sum += CBUF_Get(cbuf_adc1, i);
    }
    avg_adc1 = sum >> cbuf_adc1_SIZE_2;
 4ac:	96 95       	lsr	r25
 4ae:	87 95       	ror	r24
 4b0:	92 95       	swap	r25
 4b2:	82 95       	swap	r24
 4b4:	8f 70       	andi	r24, 0x0F	; 15
 4b6:	89 27       	eor	r24, r25
 4b8:	9f 70       	andi	r25, 0x0F	; 15
 4ba:	89 27       	eor	r24, r25
 4bc:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <avg_adc1>
    return avg_adc1;
}
 4c0:	08 95       	ret

000004c2 <ma_adc2>:
* Ma = (1/N)*Summation of x[i] from i=0 to N, 
* if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
*
*/
uint8_t ma_adc2(void)
{   
 4c2:	20 e2       	ldi	r18, 0x20	; 32
 4c4:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc2_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc2, i);
 4ca:	a2 ec       	ldi	r26, 0xC2	; 194
 4cc:	b1 e0       	ldi	r27, 0x01	; 1
 4ce:	4c 91       	ld	r20, X
 4d0:	f9 01       	movw	r30, r18
 4d2:	e4 0f       	add	r30, r20
 4d4:	f1 1d       	adc	r31, r1
 4d6:	ef 71       	andi	r30, 0x1F	; 31
 4d8:	ff 27       	eor	r31, r31
 4da:	ee 53       	subi	r30, 0x3E	; 62
 4dc:	fe 4f       	sbci	r31, 0xFE	; 254
 4de:	42 81       	ldd	r20, Z+2	; 0x02
 4e0:	84 0f       	add	r24, r20
 4e2:	91 1d       	adc	r25, r1
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	31 09       	sbc	r19, r1
*
*/
uint8_t ma_adc2(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc2_SIZE; i; i--){
 4e8:	91 f7       	brne	.-28     	; 0x4ce <ma_adc2+0xc>
        sum += CBUF_Get(cbuf_adc2, i);
    }
    avg_adc2 = sum >> cbuf_adc2_SIZE_2;
 4ea:	96 95       	lsr	r25
 4ec:	87 95       	ror	r24
 4ee:	92 95       	swap	r25
 4f0:	82 95       	swap	r24
 4f2:	8f 70       	andi	r24, 0x0F	; 15
 4f4:	89 27       	eor	r24, r25
 4f6:	9f 70       	andi	r25, 0x0F	; 15
 4f8:	89 27       	eor	r24, r25
 4fa:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <avg_adc2>
    return avg_adc2;
}
 4fe:	08 95       	ret

00000500 <ma_adc3>:
 * Ma = (1/N)*Summation of x[i] from i=0 to N, 
 * if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
 *
 */
uint8_t ma_adc3(void)
{   
 500:	20 e2       	ldi	r18, 0x20	; 32
 502:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc3_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc3, i);
 508:	a9 e0       	ldi	r26, 0x09	; 9
 50a:	b2 e0       	ldi	r27, 0x02	; 2
 50c:	4c 91       	ld	r20, X
 50e:	f9 01       	movw	r30, r18
 510:	e4 0f       	add	r30, r20
 512:	f1 1d       	adc	r31, r1
 514:	ef 71       	andi	r30, 0x1F	; 31
 516:	ff 27       	eor	r31, r31
 518:	e7 5f       	subi	r30, 0xF7	; 247
 51a:	fd 4f       	sbci	r31, 0xFD	; 253
 51c:	42 81       	ldd	r20, Z+2	; 0x02
 51e:	84 0f       	add	r24, r20
 520:	91 1d       	adc	r25, r1
 522:	21 50       	subi	r18, 0x01	; 1
 524:	31 09       	sbc	r19, r1
 *
 */
uint8_t ma_adc3(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc3_SIZE; i; i--){
 526:	91 f7       	brne	.-28     	; 0x50c <ma_adc3+0xc>
        sum += CBUF_Get(cbuf_adc3, i);
    }
    avg_adc3 = sum >> cbuf_adc3_SIZE_2;
 528:	96 95       	lsr	r25
 52a:	87 95       	ror	r24
 52c:	92 95       	swap	r25
 52e:	82 95       	swap	r24
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	89 27       	eor	r24, r25
 534:	9f 70       	andi	r25, 0x0F	; 15
 536:	89 27       	eor	r24, r25
 538:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <avg_adc3>
    return avg_adc3;
}
 53c:	08 95       	ret

0000053e <ma_adc4>:
 * Ma = (1/N)*Summation of x[i] from i=0 to N, 
 * if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
 *
 */
uint8_t ma_adc4(void)
{   
 53e:	20 e2       	ldi	r18, 0x20	; 32
 540:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc4_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc4, i);
 546:	a5 ee       	ldi	r26, 0xE5	; 229
 548:	b1 e0       	ldi	r27, 0x01	; 1
 54a:	4c 91       	ld	r20, X
 54c:	f9 01       	movw	r30, r18
 54e:	e4 0f       	add	r30, r20
 550:	f1 1d       	adc	r31, r1
 552:	ef 71       	andi	r30, 0x1F	; 31
 554:	ff 27       	eor	r31, r31
 556:	eb 51       	subi	r30, 0x1B	; 27
 558:	fe 4f       	sbci	r31, 0xFE	; 254
 55a:	42 81       	ldd	r20, Z+2	; 0x02
 55c:	84 0f       	add	r24, r20
 55e:	91 1d       	adc	r25, r1
 560:	21 50       	subi	r18, 0x01	; 1
 562:	31 09       	sbc	r19, r1
 *
 */
uint8_t ma_adc4(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc4_SIZE; i; i--){
 564:	91 f7       	brne	.-28     	; 0x54a <ma_adc4+0xc>
        sum += CBUF_Get(cbuf_adc4, i);
    }
    avg_adc4 = sum >> cbuf_adc4_SIZE_2;
 566:	96 95       	lsr	r25
 568:	87 95       	ror	r24
 56a:	92 95       	swap	r25
 56c:	82 95       	swap	r24
 56e:	8f 70       	andi	r24, 0x0F	; 15
 570:	89 27       	eor	r24, r25
 572:	9f 70       	andi	r25, 0x0F	; 15
 574:	89 27       	eor	r24, r25
 576:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <avg_adc4>
    return avg_adc4;
}
 57a:	08 95       	ret

0000057c <ma_adc5>:
 * Ma = (1/N)*Summation of x[i] from i=0 to N, 
 * if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
 *
 */
uint8_t ma_adc5(void)
{   
 57c:	20 e2       	ldi	r18, 0x20	; 32
 57e:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc5_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc5, i);
 584:	ad e7       	ldi	r26, 0x7D	; 125
 586:	b1 e0       	ldi	r27, 0x01	; 1
 588:	4c 91       	ld	r20, X
 58a:	f9 01       	movw	r30, r18
 58c:	e4 0f       	add	r30, r20
 58e:	f1 1d       	adc	r31, r1
 590:	ef 71       	andi	r30, 0x1F	; 31
 592:	ff 27       	eor	r31, r31
 594:	e3 58       	subi	r30, 0x83	; 131
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	42 81       	ldd	r20, Z+2	; 0x02
 59a:	84 0f       	add	r24, r20
 59c:	91 1d       	adc	r25, r1
 59e:	21 50       	subi	r18, 0x01	; 1
 5a0:	31 09       	sbc	r19, r1
 *
 */
uint8_t ma_adc5(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc5_SIZE; i; i--){
 5a2:	91 f7       	brne	.-28     	; 0x588 <ma_adc5+0xc>
        sum += CBUF_Get(cbuf_adc5, i);
    }
    avg_adc5 = sum >> cbuf_adc5_SIZE_2;
 5a4:	96 95       	lsr	r25
 5a6:	87 95       	ror	r24
 5a8:	92 95       	swap	r25
 5aa:	82 95       	swap	r24
 5ac:	8f 70       	andi	r24, 0x0F	; 15
 5ae:	89 27       	eor	r24, r25
 5b0:	9f 70       	andi	r25, 0x0F	; 15
 5b2:	89 27       	eor	r24, r25
 5b4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <avg_adc5>
    return avg_adc5;
}
 5b8:	08 95       	ret

000005ba <adc_select_channel>:
 * @brief Muda o canal do adc
 * @param __ch is the channel to be switched to
 * @return return the selected channel
 */
uint8_t adc_select_channel(adc_channels_t __ch)
{
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	1f 92       	push	r1
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	89 83       	std	Y+1, r24	; 0x01
    ADC_CHANNEL = __ch;
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
    ADMUX = (ADMUX & 0xF8) | ADC_CHANNEL; // clears the bottom 3 bits before ORing
 5cc:	ec e7       	ldi	r30, 0x7C	; 124
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <__data_end>
 5d6:	88 7f       	andi	r24, 0xF8	; 248
 5d8:	89 2b       	or	r24, r25
 5da:	80 83       	st	Z, r24
    return ADC_CHANNEL;
 5dc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
}
 5e0:	0f 90       	pop	r0
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <adc_init>:
 */
void adc_init(void)
{

    // configuracao do ADC
    PORTC   =   0b00000000;                         // pull-up for adcs
 5e8:	18 b8       	out	0x08, r1	; 8
    DDRC    =   0b00000000;                         // all adcs as inputs
 5ea:	17 b8       	out	0x07, r1	; 7
    DIDR0   =   0b00000111;                         // ADC0 to ADC2 as adc (digital disable)
 5ec:	87 e0       	ldi	r24, 0x07	; 7
 5ee:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

    ADMUX   =   (0 << REFS1)                        // AVcc with external capacitor at AREF pin
 5f2:	80 e6       	ldi	r24, 0x60	; 96
 5f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
            | (1 << REFS0)
            | (1 << ADLAR);                         // ADC left adjusted -> using 8bits ADCH only

    ADCSRB  =   (0 << ADTS2)                        // Auto-trigger source: timer0 Compare Match A
 5f8:	83 e0       	ldi	r24, 0x03	; 3
 5fa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
            | (1 << ADTS1)
            | (1 << ADTS0);

    adc_select_channel(ADC1);                       // Choose admux
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	0e 94 dd 02 	call	0x5ba	; 0x5ba <adc_select_channel>
    ADCSRA  =   (1 << ADATE)                        // ADC Auto Trigger Enable
 604:	8f ee       	ldi	r24, 0xEF	; 239
 606:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            | (1 << ADPS1)
            | (1 << ADPS0);


    // configuracao do Timer TC0 --> TIMER DO ADC
    TCCR0A  =   (1 << WGM01) | (0 << WGM00)         // Timer 0 in Mode 2 = CTC (clear on compare)
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	84 bd       	out	0x24, r24	; 36
            | (0 << COM0A1) | (0 << COM0A0)         // Normal port operation
            | (0 << COM0B1) | (0 << COM0B0);        // do nothing with OC0B
    TCCR0B  =   (0 << WGM02)                        // Timer 0 in Mode 2 = CTC (clear on compare)
 60e:	84 e0       	ldi	r24, 0x04	; 4
 610:	85 bd       	out	0x25, r24	; 37
            | (0 << FOC0A) | (0 << FOC0B)           // dont force outputs
            | (1 << CS02)                           // clock enabled, prescaller = 256
            | (0 << CS01)
            | (0 << CS00);

	OCR0A  =    20;                                 // Valor para igualdade de comparacao A para frequencia de ~1500 Hz
 612:	84 e1       	ldi	r24, 0x14	; 20
 614:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |=   (1 << OCIE0A);                      // Ativa a interrupcao na igualdade de comparação do TC0 com OCR0A
 616:	ee e6       	ldi	r30, 0x6E	; 110
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	82 60       	ori	r24, 0x02	; 2
 61e:	80 83       	st	Z, r24
 620:	08 95       	ret

00000622 <__vector_21>:
}

/**
 * @brief MUX do ADC
 */
ISR(ADC_vect){
 622:	1f 92       	push	r1
 624:	0f 92       	push	r0
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	0f 92       	push	r0
 62a:	11 24       	eor	r1, r1
 62c:	2f 93       	push	r18
 62e:	3f 93       	push	r19
 630:	4f 93       	push	r20
 632:	5f 93       	push	r21
 634:	6f 93       	push	r22
 636:	7f 93       	push	r23
 638:	8f 93       	push	r24
 63a:	9f 93       	push	r25
 63c:	af 93       	push	r26
 63e:	bf 93       	push	r27
 640:	ef 93       	push	r30
 642:	ff 93       	push	r31
    switch(ADC_CHANNEL){
 644:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 648:	82 30       	cpi	r24, 0x02	; 2
 64a:	09 f4       	brne	.+2      	; 0x64e <__vector_21+0x2c>
 64c:	3f c0       	rjmp	.+126    	; 0x6cc <__vector_21+0xaa>
 64e:	28 f4       	brcc	.+10     	; 0x65a <__vector_21+0x38>
 650:	88 23       	and	r24, r24
 652:	61 f0       	breq	.+24     	; 0x66c <__vector_21+0x4a>
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	11 f1       	breq	.+68     	; 0x69c <__vector_21+0x7a>
 658:	93 c0       	rjmp	.+294    	; 0x780 <__vector_21+0x15e>
 65a:	84 30       	cpi	r24, 0x04	; 4
 65c:	09 f4       	brne	.+2      	; 0x660 <__vector_21+0x3e>
 65e:	66 c0       	rjmp	.+204    	; 0x72c <__vector_21+0x10a>
 660:	08 f4       	brcc	.+2      	; 0x664 <__vector_21+0x42>
 662:	4c c0       	rjmp	.+152    	; 0x6fc <__vector_21+0xda>
 664:	85 30       	cpi	r24, 0x05	; 5
 666:	09 f4       	brne	.+2      	; 0x66a <__vector_21+0x48>
 668:	79 c0       	rjmp	.+242    	; 0x75c <__vector_21+0x13a>
 66a:	8a c0       	rjmp	.+276    	; 0x780 <__vector_21+0x15e>
        case ADC0:
            CBUF_Push(cbuf_adc0, ADCH); 
 66c:	ab e2       	ldi	r26, 0x2B	; 43
 66e:	b2 e0       	ldi	r27, 0x02	; 2
 670:	11 96       	adiw	r26, 0x01	; 1
 672:	ec 91       	ld	r30, X
 674:	11 97       	sbiw	r26, 0x01	; 1
 676:	ef 71       	andi	r30, 0x1F	; 31
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 67e:	e5 5d       	subi	r30, 0xD5	; 213
 680:	fd 4f       	sbci	r31, 0xFD	; 253
 682:	82 83       	std	Z+2, r24	; 0x02
 684:	11 96       	adiw	r26, 0x01	; 1
 686:	8c 91       	ld	r24, X
 688:	11 97       	sbiw	r26, 0x01	; 1
 68a:	8f 5f       	subi	r24, 0xFF	; 255
 68c:	11 96       	adiw	r26, 0x01	; 1
 68e:	8c 93       	st	X, r24
            ADC_CHANNEL++;
 690:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 694:	8f 5f       	subi	r24, 0xFF	; 255
 696:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
            break;
 69a:	74 c0       	rjmp	.+232    	; 0x784 <__vector_21+0x162>
        case ADC1:
            CBUF_Push(cbuf_adc1, ADCH); 
 69c:	af e9       	ldi	r26, 0x9F	; 159
 69e:	b1 e0       	ldi	r27, 0x01	; 1
 6a0:	11 96       	adiw	r26, 0x01	; 1
 6a2:	ec 91       	ld	r30, X
 6a4:	11 97       	sbiw	r26, 0x01	; 1
 6a6:	ef 71       	andi	r30, 0x1F	; 31
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 6ae:	e1 56       	subi	r30, 0x61	; 97
 6b0:	fe 4f       	sbci	r31, 0xFE	; 254
 6b2:	82 83       	std	Z+2, r24	; 0x02
 6b4:	11 96       	adiw	r26, 0x01	; 1
 6b6:	8c 91       	ld	r24, X
 6b8:	11 97       	sbiw	r26, 0x01	; 1
 6ba:	8f 5f       	subi	r24, 0xFF	; 255
 6bc:	11 96       	adiw	r26, 0x01	; 1
 6be:	8c 93       	st	X, r24
            ADC_CHANNEL++;
 6c0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 6c4:	8f 5f       	subi	r24, 0xFF	; 255
 6c6:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
            break;
 6ca:	5c c0       	rjmp	.+184    	; 0x784 <__vector_21+0x162>
        case ADC2:
            CBUF_Push(cbuf_adc2, ADCH);
 6cc:	a2 ec       	ldi	r26, 0xC2	; 194
 6ce:	b1 e0       	ldi	r27, 0x01	; 1
 6d0:	11 96       	adiw	r26, 0x01	; 1
 6d2:	ec 91       	ld	r30, X
 6d4:	11 97       	sbiw	r26, 0x01	; 1
 6d6:	ef 71       	andi	r30, 0x1F	; 31
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 6de:	ee 53       	subi	r30, 0x3E	; 62
 6e0:	fe 4f       	sbci	r31, 0xFE	; 254
 6e2:	82 83       	std	Z+2, r24	; 0x02
 6e4:	11 96       	adiw	r26, 0x01	; 1
 6e6:	8c 91       	ld	r24, X
 6e8:	11 97       	sbiw	r26, 0x01	; 1
 6ea:	8f 5f       	subi	r24, 0xFF	; 255
 6ec:	11 96       	adiw	r26, 0x01	; 1
 6ee:	8c 93       	st	X, r24
			ADC_CHANNEL++;
 6f0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
            break;
 6fa:	44 c0       	rjmp	.+136    	; 0x784 <__vector_21+0x162>
		case ADC3:
			CBUF_Push(cbuf_adc3, ADCH);
 6fc:	a9 e0       	ldi	r26, 0x09	; 9
 6fe:	b2 e0       	ldi	r27, 0x02	; 2
 700:	11 96       	adiw	r26, 0x01	; 1
 702:	ec 91       	ld	r30, X
 704:	11 97       	sbiw	r26, 0x01	; 1
 706:	ef 71       	andi	r30, 0x1F	; 31
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 70e:	e7 5f       	subi	r30, 0xF7	; 247
 710:	fd 4f       	sbci	r31, 0xFD	; 253
 712:	82 83       	std	Z+2, r24	; 0x02
 714:	11 96       	adiw	r26, 0x01	; 1
 716:	8c 91       	ld	r24, X
 718:	11 97       	sbiw	r26, 0x01	; 1
 71a:	8f 5f       	subi	r24, 0xFF	; 255
 71c:	11 96       	adiw	r26, 0x01	; 1
 71e:	8c 93       	st	X, r24
			ADC_CHANNEL++;
 720:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 724:	8f 5f       	subi	r24, 0xFF	; 255
 726:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
			break;
 72a:	2c c0       	rjmp	.+88     	; 0x784 <__vector_21+0x162>
		case ADC4:
			CBUF_Push(cbuf_adc4, ADCH);
 72c:	a5 ee       	ldi	r26, 0xE5	; 229
 72e:	b1 e0       	ldi	r27, 0x01	; 1
 730:	11 96       	adiw	r26, 0x01	; 1
 732:	ec 91       	ld	r30, X
 734:	11 97       	sbiw	r26, 0x01	; 1
 736:	ef 71       	andi	r30, 0x1F	; 31
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 73e:	eb 51       	subi	r30, 0x1B	; 27
 740:	fe 4f       	sbci	r31, 0xFE	; 254
 742:	82 83       	std	Z+2, r24	; 0x02
 744:	11 96       	adiw	r26, 0x01	; 1
 746:	8c 91       	ld	r24, X
 748:	11 97       	sbiw	r26, 0x01	; 1
 74a:	8f 5f       	subi	r24, 0xFF	; 255
 74c:	11 96       	adiw	r26, 0x01	; 1
 74e:	8c 93       	st	X, r24
			ADC_CHANNEL++;
 750:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 754:	8f 5f       	subi	r24, 0xFF	; 255
 756:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
			break;
 75a:	14 c0       	rjmp	.+40     	; 0x784 <__vector_21+0x162>
		case ADC5:
			CBUF_Push(cbuf_adc5, ADCH);
 75c:	ad e7       	ldi	r26, 0x7D	; 125
 75e:	b1 e0       	ldi	r27, 0x01	; 1
 760:	11 96       	adiw	r26, 0x01	; 1
 762:	ec 91       	ld	r30, X
 764:	11 97       	sbiw	r26, 0x01	; 1
 766:	ef 71       	andi	r30, 0x1F	; 31
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 76e:	e3 58       	subi	r30, 0x83	; 131
 770:	fe 4f       	sbci	r31, 0xFE	; 254
 772:	82 83       	std	Z+2, r24	; 0x02
 774:	11 96       	adiw	r26, 0x01	; 1
 776:	8c 91       	ld	r24, X
 778:	11 97       	sbiw	r26, 0x01	; 1
 77a:	8f 5f       	subi	r24, 0xFF	; 255
 77c:	11 96       	adiw	r26, 0x01	; 1
 77e:	8c 93       	st	X, r24
			//break;
        default:
            ADC_CHANNEL = ADC0;             // recycles
 780:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
            break;
    }        
    adc_select_channel(ADC_CHANNEL);
 784:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 788:	0e 94 dd 02 	call	0x5ba	; 0x5ba <adc_select_channel>
}
 78c:	ff 91       	pop	r31
 78e:	ef 91       	pop	r30
 790:	bf 91       	pop	r27
 792:	af 91       	pop	r26
 794:	9f 91       	pop	r25
 796:	8f 91       	pop	r24
 798:	7f 91       	pop	r23
 79a:	6f 91       	pop	r22
 79c:	5f 91       	pop	r21
 79e:	4f 91       	pop	r20
 7a0:	3f 91       	pop	r19
 7a2:	2f 91       	pop	r18
 7a4:	0f 90       	pop	r0
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	0f 90       	pop	r0
 7aa:	1f 90       	pop	r1
 7ac:	18 95       	reti

000007ae <__vector_14>:
 
/**
 * @brief ISR necessária para auto-trigger do ADC. Caso contrário, dispara
 * BADISR_vect.
 */
EMPTY_INTERRUPT(TIMER0_COMPA_vect);
 7ae:	18 95       	reti

000007b0 <calculate_check_sum>:
   @param *data is a int pointer to the prealocated data
   @param dataLenght is the length of data
   @param checkSumByte indicates where the check sum byte is in the data
*/
uint8_t calculate_check_sum(uint8_t *bytes, int8_t dataLenght)
{
 7b0:	dc 01       	movw	r26, r24
  uint16_t sum = 0;
  uint8_t *bytes_start = bytes;     // keeps the pointer reference
  for (dataLenght -= 1; dataLenght >= 0; dataLenght--) {
 7b2:	61 50       	subi	r22, 0x01	; 1
 7b4:	a2 f0       	brmi	.+40     	; 0x7de <calculate_check_sum+0x2e>
 7b6:	20 e0       	ldi	r18, 0x00	; 0
 7b8:	30 e0       	ldi	r19, 0x00	; 0
    if (((sum += bytes[dataLenght]) & 0xFF00) != 0) {
 7ba:	fd 01       	movw	r30, r26
 7bc:	e6 0f       	add	r30, r22
 7be:	f1 1d       	adc	r31, r1
 7c0:	67 fd       	sbrc	r22, 7
 7c2:	fa 95       	dec	r31
 7c4:	90 81       	ld	r25, Z
 7c6:	29 0f       	add	r18, r25
 7c8:	31 1d       	adc	r19, r1
 7ca:	a9 01       	movw	r20, r18
 7cc:	44 27       	eor	r20, r20
 7ce:	45 2b       	or	r20, r21
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <calculate_check_sum+0x28>
      sum = (uint16_t)((~sum) & 0xFF); // ones' complement
 7d2:	20 95       	com	r18
 7d4:	30 95       	com	r19
 7d6:	33 27       	eor	r19, r19
 7d8:	61 50       	subi	r22, 0x01	; 1
*/
uint8_t calculate_check_sum(uint8_t *bytes, int8_t dataLenght)
{
  uint16_t sum = 0;
  uint8_t *bytes_start = bytes;     // keeps the pointer reference
  for (dataLenght -= 1; dataLenght >= 0; dataLenght--) {
 7da:	7a f7       	brpl	.-34     	; 0x7ba <calculate_check_sum+0xa>
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <calculate_check_sum+0x32>
   @param dataLenght is the length of data
   @param checkSumByte indicates where the check sum byte is in the data
*/
uint8_t calculate_check_sum(uint8_t *bytes, int8_t dataLenght)
{
  uint16_t sum = 0;
 7de:	20 e0       	ldi	r18, 0x00	; 0
 7e0:	30 e0       	ldi	r19, 0x00	; 0
    }
  }
  bytes = bytes_start;              // takes back the pointer reference

  return (uint8_t) (sum & 0xFF);
}
 7e2:	82 2f       	mov	r24, r18
 7e4:	08 95       	ret

000007e6 <bt_send_package>:

#include "bt.h"
#include "machine.h"

void bt_send_package(void)
{
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
  mpackage.header = 0xFFFFFFFF;
 7f4:	c4 e6       	ldi	r28, 0x64	; 100
 7f6:	d2 e0       	ldi	r29, 0x02	; 2
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	9f ef       	ldi	r25, 0xFF	; 255
 7fc:	dc 01       	movw	r26, r24
 7fe:	88 83       	st	Y, r24
 800:	99 83       	std	Y+1, r25	; 0x01
 802:	aa 83       	std	Y+2, r26	; 0x02
 804:	bb 83       	std	Y+3, r27	; 0x03
  mpackage.timestamp = timestamp++;
 806:	d0 90 88 02 	lds	r13, 0x0288	; 0x800288 <timestamp>
 80a:	e0 90 89 02 	lds	r14, 0x0289	; 0x800289 <timestamp+0x1>
 80e:	f0 90 8a 02 	lds	r15, 0x028A	; 0x80028a <timestamp+0x2>
 812:	00 91 8b 02 	lds	r16, 0x028B	; 0x80028b <timestamp+0x3>
 816:	10 91 8c 02 	lds	r17, 0x028C	; 0x80028c <timestamp+0x4>
 81a:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <timestamp+0x5>
 81e:	f0 91 8e 02 	lds	r31, 0x028E	; 0x80028e <timestamp+0x6>
 822:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <timestamp+0x7>
 826:	2d 2d       	mov	r18, r13
 828:	3e 2d       	mov	r19, r14
 82a:	4f 2d       	mov	r20, r15
 82c:	50 2f       	mov	r21, r16
 82e:	61 2f       	mov	r22, r17
 830:	7b 2f       	mov	r23, r27
 832:	8f 2f       	mov	r24, r31
 834:	9e 2f       	mov	r25, r30
 836:	a1 e0       	ldi	r26, 0x01	; 1
 838:	0e 94 26 06 	call	0xc4c	; 0xc4c <__adddi3_s8>
 83c:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <timestamp>
 840:	30 93 89 02 	sts	0x0289, r19	; 0x800289 <timestamp+0x1>
 844:	40 93 8a 02 	sts	0x028A, r20	; 0x80028a <timestamp+0x2>
 848:	50 93 8b 02 	sts	0x028B, r21	; 0x80028b <timestamp+0x3>
 84c:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <timestamp+0x4>
 850:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <timestamp+0x5>
 854:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <timestamp+0x6>
 858:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <timestamp+0x7>
 85c:	dc 82       	std	Y+4, r13	; 0x04
 85e:	ed 82       	std	Y+5, r14	; 0x05
 860:	fe 82       	std	Y+6, r15	; 0x06
 862:	0f 83       	std	Y+7, r16	; 0x07
 864:	18 87       	std	Y+8, r17	; 0x08
 866:	b9 87       	std	Y+9, r27	; 0x09
 868:	fa 87       	std	Y+10, r31	; 0x0a
 86a:	eb 87       	std	Y+11, r30	; 0x0b
  mpackage.dataSize = 20;           // size in bytes
 86c:	84 e1       	ldi	r24, 0x14	; 20
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	9d 87       	std	Y+13, r25	; 0x0d
 872:	8c 87       	std	Y+12, r24	; 0x0c
  mpackage.data.InputCurrent = control.InCurrent;
 874:	ef e4       	ldi	r30, 0x4F	; 79
 876:	f2 e0       	ldi	r31, 0x02	; 2
 878:	83 89       	ldd	r24, Z+19	; 0x13
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	99 8b       	std	Y+17, r25	; 0x11
 87e:	88 8b       	std	Y+16, r24	; 0x10
  mpackage.data.OutputCurrent = control.OutCurrent;
 880:	84 89       	ldd	r24, Z+20	; 0x14
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	9b 8b       	std	Y+19, r25	; 0x13
 886:	8a 8b       	std	Y+18, r24	; 0x12
  mpackage.data.MotorVoltage = control.MotorVoltage;
 888:	81 89       	ldd	r24, Z+17	; 0x11
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	9d 8b       	std	Y+21, r25	; 0x15
 88e:	8c 8b       	std	Y+20, r24	; 0x14
  mpackage.data.BatteryVoltage = control.BatteryVoltage;
 890:	87 85       	ldd	r24, Z+15	; 0x0f
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	9f 8b       	std	Y+23, r25	; 0x17
 896:	8e 8b       	std	Y+22, r24	; 0x16
  mpackage.data.MotorTemperature = control.MotorTemperature;
 898:	80 89       	ldd	r24, Z+16	; 0x10
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	99 8f       	std	Y+25, r25	; 0x19
 89e:	88 8f       	std	Y+24, r24	; 0x18
  mpackage.data.BatteryTemperature = control.BatteryTemperature;
 8a0:	82 89       	ldd	r24, Z+18	; 0x12
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	9b 8f       	std	Y+27, r25	; 0x1b
 8a6:	8a 8f       	std	Y+26, r24	; 0x1a
  mpackage.data.MotorRPM = 0;
 8a8:	1d 8e       	std	Y+29, r1	; 0x1d
 8aa:	1c 8e       	std	Y+28, r1	; 0x1c
  mpackage.data.WaterSpeed = 0;
 8ac:	1f 8e       	std	Y+31, r1	; 0x1f
 8ae:	1e 8e       	std	Y+30, r1	; 0x1e
  mpackage.data.Torque1 = 0;
 8b0:	19 a2       	std	Y+33, r1	; 0x21
 8b2:	18 a2       	std	Y+32, r1	; 0x20
  mpackage.data.Torque2 = 0;
 8b4:	1b a2       	std	Y+35, r1	; 0x23
 8b6:	1a a2       	std	Y+34, r1	; 0x22
  mpackage.sum = calculate_check_sum( (uint8_t*) & (mpackage.data), sizeof(mpackage.data));
 8b8:	64 e1       	ldi	r22, 0x14	; 20
 8ba:	84 e7       	ldi	r24, 0x74	; 116
 8bc:	92 e0       	ldi	r25, 0x02	; 2
 8be:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <calculate_check_sum>
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	9f 87       	std	Y+15, r25	; 0x0f
 8c6:	8e 87       	std	Y+14, r24	; 0x0e

  usart_send_buffer((uint8_t*) &mpackage, sizeof(mpackage));
 8c8:	64 e2       	ldi	r22, 0x24	; 36
 8ca:	ce 01       	movw	r24, r28
 8cc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <usart_send_buffer>
    Serial.print("\t");
    }
    Serial.println();
  */ 
 
}
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	1f 91       	pop	r17
 8d6:	0f 91       	pop	r16
 8d8:	ff 90       	pop	r15
 8da:	ef 90       	pop	r14
 8dc:	df 90       	pop	r13
 8de:	08 95       	ret

000008e0 <can_app_extractor_mcc17_1_mppt>:
        control.I = msg->data[CAN_MSG_MAM17_MOTOR_LIM_BYTE];
    } 
}

void can_app_extractor_mcc17_1_mppt(can_t *msg){
	if (msg->data[CAN_SIGNATURE_BYTE] == CAN_SIGNATURE_MCC17_1)	{
 8e0:	fc 01       	movw	r30, r24
 8e2:	24 81       	ldd	r18, Z+4	; 0x04
 8e4:	2d 3d       	cpi	r18, 0xDD	; 221
 8e6:	19 f4       	brne	.+6      	; 0x8ee <can_app_extractor_mcc17_1_mppt+0xe>
		control.MPPT_1_D = msg->data[CAN_MSG_MCC17_MPPT_IPANEL_BYTE];
 8e8:	86 81       	ldd	r24, Z+6	; 0x06
 8ea:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <control>
 8ee:	08 95       	ret

000008f0 <can_app_task>:

/**
* @brief Manages the canbus application protocol
*/
inline void can_app_task(void)
{
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	cd b7       	in	r28, 0x3d	; 61
 8f6:	de b7       	in	r29, 0x3e	; 62
 8f8:	2c 97       	sbiw	r28, 0x0c	; 12
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	f8 94       	cli
 8fe:	de bf       	out	0x3e, r29	; 62
 900:	0f be       	out	0x3f, r0	; 63
 902:	cd bf       	out	0x3d, r28	; 61
        can_app_checks_without_mic17_msg = 0;
        error_flags.no_canbus = 1;
        set_state_error();
    } */
    
    if(can_check_message()){
 904:	0e 94 3b 01 	call	0x276	; 0x276 <can_check_message>
 908:	88 23       	and	r24, r24
 90a:	a1 f0       	breq	.+40     	; 0x934 <__stack+0x35>
        can_t msg;
        if(can_get_message(&msg)){
 90c:	ce 01       	movw	r24, r28
 90e:	01 96       	adiw	r24, 0x01	; 1
 910:	0e 94 49 01 	call	0x292	; 0x292 <can_get_message>
 914:	88 23       	and	r24, r24
 916:	71 f0       	breq	.+28     	; 0x934 <__stack+0x35>
 * @brief redirects a specific message extractor to a given message
 * @param *msg pointer to the message to be extracted
 */
inline void can_app_msg_extractors_switch(can_t *msg)
{
    if(msg->data[CAN_SIGNATURE_BYTE] == CAN_SIGNATURE_MAM17){
 918:	8d 81       	ldd	r24, Y+5	; 0x05
 91a:	8e 3b       	cpi	r24, 0xBE	; 190
 91c:	29 f4       	brne	.+10     	; 0x928 <__stack+0x29>
        switch(msg->id){
 91e:	29 81       	ldd	r18, Y+1	; 0x01
 920:	3a 81       	ldd	r19, Y+2	; 0x02
 922:	21 31       	cpi	r18, 0x11	; 17
 924:	31 05       	cpc	r19, r1
 926:	31 f0       	breq	.+12     	; 0x934 <__stack+0x35>
    }
	if(msg->data[CAN_SIGNATURE_BYTE] == CAN_SIGNATURE_MCS17){
		
	}
	
	if(msg->data[CAN_SIGNATURE_BYTE] == CAN_SIGNATURE_MCC17_1){
 928:	8d 3d       	cpi	r24, 0xDD	; 221
 92a:	21 f4       	brne	.+8      	; 0x934 <__stack+0x35>
		can_app_extractor_mcc17_1_mppt(msg);
 92c:	ce 01       	movw	r24, r28
 92e:	01 96       	adiw	r24, 0x01	; 1
 930:	0e 94 70 04 	call	0x8e0	; 0x8e0 <can_app_extractor_mcc17_1_mppt>
*/
inline void can_app_task(void)
{
    check_can();

    if(can_app_send_state_clk_div++ >= CAN_APP_SEND_STATE_CLK_DIV){
 934:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <can_app_send_state_clk_div>
 938:	84 36       	cpi	r24, 0x64	; 100
 93a:	20 f4       	brcc	.+8      	; 0x944 <__stack+0x45>
 93c:	8f 5f       	subi	r24, 0xFF	; 255
 93e:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <can_app_send_state_clk_div>
 942:	02 c0       	rjmp	.+4      	; 0x948 <__stack+0x49>
        VERBOSE_MSG_CAN_APP(usart_send_string("state msg was sent.\n"));
        
        can_app_send_state_clk_div = 0;
 944:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <can_app_send_state_clk_div>
    }

    if(can_app_send_motor_clk_div++ >= CAN_APP_SEND_MOTOR_CLK_DIV){
 948:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <can_app_send_motor_clk_div>
 94c:	82 33       	cpi	r24, 0x32	; 50
 94e:	20 f4       	brcc	.+8      	; 0x958 <__stack+0x59>
 950:	8f 5f       	subi	r24, 0xFF	; 255
 952:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <can_app_send_motor_clk_div>
 956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
        VERBOSE_MSG_CAN_APP(usart_send_string("motor msg was sent.\n"));
        //can_app_send_motor();
        can_app_send_motor_clk_div = 0;
 958:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <can_app_send_motor_clk_div>
    }

}
 95c:	2c 96       	adiw	r28, 0x0c	; 12
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	08 95       	ret

0000096e <machine_init>:
/**
* @brief set initializing state
*/ 
inline void set_state_initializing(void)
{
    state_machine = STATE_INITIALIZING;
 96e:	82 e0       	ldi	r24, 0x02	; 2
 970:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 974:	87 e0       	ldi	r24, 0x07	; 7
 976:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 97a:	80 e5       	ldi	r24, 0x50	; 80
 97c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 980:	e0 e7       	ldi	r30, 0x70	; 112
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	82 60       	ori	r24, 0x02	; 2
 988:	80 83       	st	Z, r24
 98a:	08 95       	ret

0000098c <machine_run>:

/**
 * @brief this is the machine state itself.
 */
inline void machine_run(void)
{
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
	#ifdef CAN_ON
    can_app_task();
 990:	0e 94 78 04 	call	0x8f0	; 0x8f0 <can_app_task>
	#endif
   // print_system_flags();
   // print_error_flags();
   // print_control();

    if(machine_clk){
 994:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <machine_clk>
 998:	88 23       	and	r24, r24
 99a:	09 f4       	brne	.+2      	; 0x99e <machine_run+0x12>
 99c:	81 c0       	rjmp	.+258    	; 0xaa0 <machine_run+0x114>
        machine_clk = 0;
 99e:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <machine_clk>
        switch(state_machine){
 9a2:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <state_machine>
 9a6:	81 30       	cpi	r24, 0x01	; 1
 9a8:	41 f1       	breq	.+80     	; 0x9fa <machine_run+0x6e>
 9aa:	30 f0       	brcs	.+12     	; 0x9b8 <machine_run+0x2c>
 9ac:	82 30       	cpi	r24, 0x02	; 2
 9ae:	b9 f1       	breq	.+110    	; 0xa1e <machine_run+0x92>
 9b0:	83 30       	cpi	r24, 0x03	; 3
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <machine_run+0x2a>
 9b4:	59 c0       	rjmp	.+178    	; 0xa68 <machine_run+0xdc>
 9b6:	74 c0       	rjmp	.+232    	; 0xaa0 <machine_run+0x114>
 *  - checks the temperature
 *
 */
inline void task_initializing(void)
{
    set_led();
 9b8:	5e 9a       	sbi	0x0b, 6	; 11
	timestamp = 0;
 9ba:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <timestamp>
 9be:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <timestamp+0x1>
 9c2:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <timestamp+0x2>
 9c6:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <timestamp+0x3>
 9ca:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <timestamp+0x4>
 9ce:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <timestamp+0x5>
 9d2:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <timestamp+0x6>
 9d6:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <timestamp+0x7>
    //check_buffers();
    //check_idle_current();
    //check_idle_voltage();
    //check_idle_temperature();
       
    if(!error_flags.all){
 9da:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <error_flags>
 9de:	81 11       	cpse	r24, r1
 9e0:	08 c0       	rjmp	.+16     	; 0x9f2 <machine_run+0x66>
        VERBOSE_MSG_INIT(usart_send_string("System initialized without errors.\n"));
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
/**
* @brief set idle state
*/ 
inline void set_state_idle(void)
{
    state_machine = STATE_IDLE;
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <state_machine>
 9f0:	57 c0       	rjmp	.+174    	; 0xaa0 <machine_run+0x114>
/**
 * @brief set error state
 */
inline void set_state_error(void)
{
    state_machine = STATE_ERROR;
 9f2:	83 e0       	ldi	r24, 0x03	; 3
 9f4:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <state_machine>
 9f8:	53 c0       	rjmp	.+166    	; 0xaa0 <machine_run+0x114>
 *  - checks the potentiometer state
 *  then if its ok, enable the system to operate
 */
inline void task_idle(void)
{
    if(led_clk_div++ >= 50){
 9fa:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <led_clk_div>
 9fe:	91 e0       	ldi	r25, 0x01	; 1
 a00:	98 0f       	add	r25, r24
 a02:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <led_clk_div>
 a06:	82 33       	cpi	r24, 0x32	; 50
 a08:	30 f0       	brcs	.+12     	; 0xa16 <machine_run+0x8a>
        cpl_led();
 a0a:	9b b1       	in	r25, 0x0b	; 11
 a0c:	80 e4       	ldi	r24, 0x40	; 64
 a0e:	89 27       	eor	r24, r25
 a10:	8b b9       	out	0x0b, r24	; 11
        led_clk_div = 0;
 a12:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <led_clk_div>
* @brief set running state
*/ 
inline void set_state_running(void)
{
    
    state_machine = STATE_RUNNING;
 a16:	82 e0       	ldi	r24, 0x02	; 2
 a18:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <state_machine>
 a1c:	41 c0       	rjmp	.+130    	; 0xaa0 <machine_run+0x114>
/**
 * @brief running task checks the system and apply the control action to pwm.
 */
inline void task_running(void)
{
    if(led_clk_div++ >= 10){
 a1e:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <led_clk_div>
 a22:	91 e0       	ldi	r25, 0x01	; 1
 a24:	98 0f       	add	r25, r24
 a26:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <led_clk_div>
 a2a:	8a 30       	cpi	r24, 0x0A	; 10
 a2c:	30 f0       	brcs	.+12     	; 0xa3a <machine_run+0xae>
        cpl_led();
 a2e:	9b b1       	in	r25, 0x0b	; 11
 a30:	80 e4       	ldi	r24, 0x40	; 64
 a32:	89 27       	eor	r24, r25
 a34:	8b b9       	out	0x0b, r24	; 11
        led_clk_div = 0;
 a36:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <led_clk_div>
/**
 * @brief checks if the current level is ok for running state
 */
inline void check_running_OutCurrent(void)
{
   control.OutCurrent = ma_adc5(); 
 a3a:	0e 94 be 02 	call	0x57c	; 0x57c <ma_adc5>
 a3e:	cf e4       	ldi	r28, 0x4F	; 79
 a40:	d2 e0       	ldi	r29, 0x02	; 2
 a42:	8c 8b       	std	Y+20, r24	; 0x14

/**
 * @brief checks if the current level is ok for running state
 */
inline void check_running_InCurrent(void){
	control.InCurrent = ma_adc4();
 a44:	0e 94 9f 02 	call	0x53e	; 0x53e <ma_adc4>
 a48:	8b 8b       	std	Y+19, r24	; 0x13
/**
 * @brief checks if the voltage level is ok for running state
 */
inline void check_running_BatteryTemperature(void)
{
	control.BatteryTemperature = ma_adc3();
 a4a:	0e 94 80 02 	call	0x500	; 0x500 <ma_adc3>
 a4e:	8a 8b       	std	Y+18, r24	; 0x12
/**
 * @brief checks if the temperature level is ok for running state
 */
inline void check_running_MotorVoltage(void)
{
    control.MotorVoltage = ma_adc2();
 a50:	0e 94 61 02 	call	0x4c2	; 0x4c2 <ma_adc2>
 a54:	89 8b       	std	Y+17, r24	; 0x11
/**
 * @brief checks if the temperature level is ok for running state
 */
inline void check_running_MotorTemperature(void)
{
    control.MotorTemperature = ma_adc1();
 a56:	0e 94 42 02 	call	0x484	; 0x484 <ma_adc1>
 a5a:	88 8b       	std	Y+16, r24	; 0x10
/**
* @brief checks if the temperature level is ok for running state
*/
inline void check_running_BatteryVoltage(void)
{
    control.BatteryVoltage = ma_adc0();
 a5c:	0e 94 23 02 	call	0x446	; 0x446 <ma_adc0>
 a60:	8f 87       	std	Y+15, r24	; 0x0f
    check_running_MotorVoltage();
	check_running_MotorTemperature();
	check_running_BatteryVoltage();
	
	//!<Envia os dados para o bluetooth	
	bt_send_package(); //!< Envia dados para o bluetooth
 a62:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bt_send_package>
 a66:	1c c0       	rjmp	.+56     	; 0xaa0 <machine_run+0x114>
/**
 * @brief error task checks the system and tries to medicine it.
 */
inline void task_error(void)
{
    if(led_clk_div++ >= 5){
 a68:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <led_clk_div>
 a6c:	91 e0       	ldi	r25, 0x01	; 1
 a6e:	98 0f       	add	r25, r24
 a70:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <led_clk_div>
 a74:	85 30       	cpi	r24, 0x05	; 5
 a76:	30 f0       	brcs	.+12     	; 0xa84 <machine_run+0xf8>
        cpl_led();
 a78:	9b b1       	in	r25, 0x0b	; 11
 a7a:	80 e4       	ldi	r24, 0x40	; 64
 a7c:	89 27       	eor	r24, r25
 a7e:	8b b9       	out	0x0b, r24	; 11
        led_clk_div = 0;
 a80:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <led_clk_div>
    }



    total_errors++;         // incrementa a contagem de erros
 a84:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <total_errors>
 a88:	8f 5f       	subi	r24, 0xFF	; 255
 a8a:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <total_errors>
    VERBOSE_MSG_ERROR(usart_send_char('\n'));
    
    if(total_errors < 2){
        VERBOSE_MSG_ERROR(usart_send_string("I will reset the machine state.\n"));
    }
    if(total_errors >= 20){
 a8e:	84 31       	cpi	r24, 0x14	; 20
 a90:	08 f0       	brcs	.+2      	; 0xa94 <machine_run+0x108>
 a92:	ff cf       	rjmp	.-2      	; 0xa92 <machine_run+0x106>
        VERBOSE_MSG_ERROR(usart_send_string("The watchdog will reset the whole system.\n"));
        for(;;);    // waits the watchdog to reset.
    }
    
    cpl_led();
 a94:	9b b1       	in	r25, 0x0b	; 11
 a96:	80 e4       	ldi	r24, 0x40	; 64
 a98:	89 27       	eor	r24, r25
 a9a:	8b b9       	out	0x0b, r24	; 11
/**
* @brief set initializing state
*/ 
inline void set_state_initializing(void)
{
    state_machine = STATE_INITIALIZING;
 a9c:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <state_machine>

            default:
                break;
        }
    }
}
 aa0:	df 91       	pop	r29
 aa2:	cf 91       	pop	r28
 aa4:	08 95       	ret

00000aa6 <__vector_7>:

/**
* @brief ISR para ações de controle
*/
ISR(TIMER2_COMPA_vect)
{
 aa6:	1f 92       	push	r1
 aa8:	0f 92       	push	r0
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	0f 92       	push	r0
 aae:	11 24       	eor	r1, r1
 ab0:	8f 93       	push	r24
    //VERBOSE_MSG_ERROR(if(machine_clk) usart_send_string("\nERROR: CLOCK CONFLICT!!!\n"));
	machine_clk = 1;
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <machine_clk>
}
 ab8:	8f 91       	pop	r24
 aba:	0f 90       	pop	r0
 abc:	0f be       	out	0x3f, r0	; 63
 abe:	0f 90       	pop	r0
 ac0:	1f 90       	pop	r1
 ac2:	18 95       	reti

00000ac4 <wdt_init>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 ac4:	9f e0       	ldi	r25, 0x0F	; 15
 ac6:	88 e1       	ldi	r24, 0x18	; 24
 ac8:	0f b6       	in	r0, 0x3f	; 63
 aca:	f8 94       	cli
 acc:	a8 95       	wdr
 ace:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 ad8:	08 95       	ret

00000ada <sleep_init>:
#include <avr/io.h>
#include <avr/sleep.h>

void sleep_init(void)
{
	set_sleep_mode(SLEEP_MODE_IDLE);
 ada:	83 b7       	in	r24, 0x33	; 51
 adc:	81 7f       	andi	r24, 0xF1	; 241
 ade:	83 bf       	out	0x33, r24	; 51
 ae0:	08 95       	ret

00000ae2 <main>:
#include "main.h"

int main(void)
{
    #ifdef USART_ON
        usart_init(MYUBRR,1,1);                         // inicializa a usart
 ae2:	41 e0       	ldi	r20, 0x01	; 1
 ae4:	61 e0       	ldi	r22, 0x01	; 1
 ae6:	80 e1       	ldi	r24, 0x10	; 16
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	0e 94 0c 06 	call	0xc18	; 0xc18 <usart_init>
        VERBOSE_MSG_INIT(usart_send_string("\n\n\nUSART... OK!\n"));
 aee:	84 e2       	ldi	r24, 0x24	; 36
 af0:	91 e0       	ldi	r25, 0x01	; 1
 af2:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 af6:	2f ef       	ldi	r18, 0xFF	; 255
 af8:	83 ed       	ldi	r24, 0xD3	; 211
 afa:	90 e3       	ldi	r25, 0x30	; 48
 afc:	21 50       	subi	r18, 0x01	; 1
 afe:	80 40       	sbci	r24, 0x00	; 0
 b00:	90 40       	sbci	r25, 0x00	; 0
 b02:	e1 f7       	brne	.-8      	; 0xafc <main+0x1a>
 b04:	00 c0       	rjmp	.+0      	; 0xb06 <main+0x24>
 b06:	00 00       	nop
        VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
    #endif 
 

    #ifdef CAN_ON
        VERBOSE_MSG_INIT(usart_send_string("CAN (125kbps)..."));
 b08:	85 e3       	ldi	r24, 0x35	; 53
 b0a:	91 e0       	ldi	r25, 0x01	; 1
 b0c:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
        can_init(BITRATE_500_KBPS);
 b10:	86 e0       	ldi	r24, 0x06	; 6
 b12:	0e 94 ca 00 	call	0x194	; 0x194 <can_init>
        VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
 b16:	8f e2       	ldi	r24, 0x2F	; 47
 b18:	91 e0       	ldi	r25, 0x01	; 1
 b1a:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
        VERBOSE_MSG_INIT(usart_send_string("CAN filters..."));
 b1e:	86 e4       	ldi	r24, 0x46	; 70
 b20:	91 e0       	ldi	r25, 0x01	; 1
 b22:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
        can_static_filter(can_filter);
 b26:	88 e6       	ldi	r24, 0x68	; 104
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	0e 94 a7 01 	call	0x34e	; 0x34e <can_static_filter>
        VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
 b2e:	8f e2       	ldi	r24, 0x2F	; 47
 b30:	91 e0       	ldi	r25, 0x01	; 1
 b32:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
    #endif

    #ifdef ADC_ON
        VERBOSE_MSG_INIT(usart_send_string("ADC..."));
 b36:	85 e5       	ldi	r24, 0x55	; 85
 b38:	91 e0       	ldi	r25, 0x01	; 1
 b3a:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
        adc_init();
 b3e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <adc_init>
        VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
 b42:	8f e2       	ldi	r24, 0x2F	; 47
 b44:	91 e0       	ldi	r25, 0x01	; 1
 b46:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
    #endif


    #ifdef SLEEP_ON 
        VERBOSE_MSG_INIT(usart_send_string("SLEEP..."));
 b4a:	8c e5       	ldi	r24, 0x5C	; 92
 b4c:	91 e0       	ldi	r25, 0x01	; 1
 b4e:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
        sleep_init();
 b52:	0e 94 6d 05 	call	0xada	; 0xada <sleep_init>
        VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
 b56:	8f e2       	ldi	r24, 0x2F	; 47
 b58:	91 e0       	ldi	r25, 0x01	; 1
 b5a:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
    #endif

    #ifdef WATCHDOG_ON
        VERBOSE_MSG_INIT(usart_send_string("WATCHDOG..."));
 b5e:	85 e6       	ldi	r24, 0x65	; 101
 b60:	91 e0       	ldi	r25, 0x01	; 1
 b62:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
        wdt_init();
 b66:	0e 94 62 05 	call	0xac4	; 0xac4 <wdt_init>
        VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
 b6a:	8f e2       	ldi	r24, 0x2F	; 47
 b6c:	91 e0       	ldi	r25, 0x01	; 1
 b6e:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
    #endif

 	#ifdef MACHINE_ON
        VERBOSE_MSG_INIT(usart_send_string("MACHINE..."));
 b72:	81 e7       	ldi	r24, 0x71	; 113
 b74:	91 e0       	ldi	r25, 0x01	; 1
 b76:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
		machine_init();
 b7a:	0e 94 b7 04 	call	0x96e	; 0x96e <machine_init>
        VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
 b7e:	8f e2       	ldi	r24, 0x2F	; 47
 b80:	91 e0       	ldi	r25, 0x01	; 1
 b82:	0e 94 d6 05 	call	0xbac	; 0xbac <usart_send_string>
	#endif
	
    set_bit(LED_DDR, LED);                      // LED como saída
 b86:	56 9a       	sbi	0x0a, 6	; 10
	//set_bit(EICRA, ISC10);                      // rising edge for int1
	//set_bit(EIMSK, INT0);                       // enables int1 interrupt
	//set_bit(EIFR, INTF0);                       // clears int0 interrupt
		
	
    sei();
 b88:	78 94       	sei
	
	for(;;){
		#ifdef WATCHDOG_ON
            wdt_reset();
 b8a:	a8 95       	wdr
		#endif

        #ifdef MACHINE_ON
            machine_run();
 b8c:	0e 94 c6 04 	call	0x98c	; 0x98c <machine_run>
        #endif

		#ifdef SLEEP_ON
            sleep_mode();
 b90:	83 b7       	in	r24, 0x33	; 51
 b92:	81 60       	ori	r24, 0x01	; 1
 b94:	83 bf       	out	0x33, r24	; 51
 b96:	88 95       	sleep
 b98:	83 b7       	in	r24, 0x33	; 51
 b9a:	8e 7f       	andi	r24, 0xFE	; 254
 b9c:	83 bf       	out	0x33, r24	; 51
 b9e:	f5 cf       	rjmp	.-22     	; 0xb8a <main+0xa8>

00000ba0 <__vector_default>:

/**
 * @brief se em debug, fica chaveando os pinos de debugs até o reset do watchdog
 */
ISR(BADISR_vect)
{
 ba0:	1f 92       	push	r1
 ba2:	0f 92       	push	r0
 ba4:	0f b6       	in	r0, 0x3f	; 63
 ba6:	0f 92       	push	r0
 ba8:	11 24       	eor	r1, r1
 baa:	ff cf       	rjmp	.-2      	; 0xbaa <__vector_default+0xa>

00000bac <usart_send_string>:
    usart_send_string(str);       // sends the string
    
    #undef LEN
    #undef BASE
    #undef FILL
}
 bac:	cf 93       	push	r28
 bae:	df 93       	push	r29
 bb0:	ec 01       	movw	r28, r24
 bb2:	28 81       	ld	r18, Y
 bb4:	22 23       	and	r18, r18
 bb6:	89 f0       	breq	.+34     	; 0xbda <usart_send_string+0x2e>
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	e0 ec       	ldi	r30, 0xC0	; 192
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	46 ec       	ldi	r20, 0xC6	; 198
 bc0:	50 e0       	ldi	r21, 0x00	; 0
 bc2:	3f 5f       	subi	r19, 0xFF	; 255
 bc4:	90 81       	ld	r25, Z
 bc6:	95 ff       	sbrs	r25, 5
 bc8:	fd cf       	rjmp	.-6      	; 0xbc4 <usart_send_string+0x18>
 bca:	da 01       	movw	r26, r20
 bcc:	2c 93       	st	X, r18
 bce:	de 01       	movw	r26, r28
 bd0:	a3 0f       	add	r26, r19
 bd2:	b1 1d       	adc	r27, r1
 bd4:	2c 91       	ld	r18, X
 bd6:	21 11       	cpse	r18, r1
 bd8:	f4 cf       	rjmp	.-24     	; 0xbc2 <usart_send_string+0x16>
 bda:	df 91       	pop	r29
 bdc:	cf 91       	pop	r28
 bde:	08 95       	ret

00000be0 <usart_send_buffer>:

/**
 * @brief sends a buffer through serial. Max lenght is 255.
 */
inline void usart_send_buffer(uint8_t *b, uint8_t lenght)
{
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
    uint8_t i = 0;
    while(i < lenght) usart_send_char(b[i++]);
 be4:	66 23       	and	r22, r22
 be6:	a9 f0       	breq	.+42     	; 0xc12 <usart_send_buffer+0x32>
 be8:	dc 01       	movw	r26, r24
 bea:	61 50       	subi	r22, 0x01	; 1
 bec:	26 2f       	mov	r18, r22
 bee:	30 e0       	ldi	r19, 0x00	; 0
 bf0:	2f 5f       	subi	r18, 0xFF	; 255
 bf2:	3f 4f       	sbci	r19, 0xFF	; 255
 bf4:	ac 01       	movw	r20, r24
 bf6:	42 0f       	add	r20, r18
 bf8:	53 1f       	adc	r21, r19
 * @brief sends a char through serial
 * @param data will be sent trough serial
 */
inline void usart_send_char(char data)
{
    while(!(UCSR0A & (1<<UDRE0)));
 bfa:	e0 ec       	ldi	r30, 0xC0	; 192
 bfc:	f0 e0       	ldi	r31, 0x00	; 0
    UDR0 = data;
 bfe:	c6 ec       	ldi	r28, 0xC6	; 198
 c00:	d0 e0       	ldi	r29, 0x00	; 0
 * @brief sends a buffer through serial. Max lenght is 255.
 */
inline void usart_send_buffer(uint8_t *b, uint8_t lenght)
{
    uint8_t i = 0;
    while(i < lenght) usart_send_char(b[i++]);
 c02:	2d 91       	ld	r18, X+
 * @brief sends a char through serial
 * @param data will be sent trough serial
 */
inline void usart_send_char(char data)
{
    while(!(UCSR0A & (1<<UDRE0)));
 c04:	90 81       	ld	r25, Z
 c06:	95 ff       	sbrs	r25, 5
 c08:	fd cf       	rjmp	.-6      	; 0xc04 <usart_send_buffer+0x24>
    UDR0 = data;
 c0a:	28 83       	st	Y, r18
 * @brief sends a buffer through serial. Max lenght is 255.
 */
inline void usart_send_buffer(uint8_t *b, uint8_t lenght)
{
    uint8_t i = 0;
    while(i < lenght) usart_send_char(b[i++]);
 c0c:	a4 17       	cp	r26, r20
 c0e:	b5 07       	cpc	r27, r21
 c10:	c1 f7       	brne	.-16     	; 0xc02 <usart_send_buffer+0x22>
}
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	08 95       	ret

00000c18 <usart_init>:
 * @endcode
 */
inline void usart_init(uint16_t ubrr, uint8_t rx, uint8_t tx)
{
    // set BAUDRATE
    UBRR0H = (uint8_t)(ubrr >>8);
 c18:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t)ubrr;
 c1c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    
    // Enable RX and TX
    UCSR0B = ((rx&1)<<RXEN0) | ((tx&1)<<TXEN0);
 c20:	e6 2f       	mov	r30, r22
 c22:	e1 70       	andi	r30, 0x01	; 1
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	e2 95       	swap	r30
 c28:	f2 95       	swap	r31
 c2a:	f0 7f       	andi	r31, 0xF0	; 240
 c2c:	fe 27       	eor	r31, r30
 c2e:	e0 7f       	andi	r30, 0xF0	; 240
 c30:	fe 27       	eor	r31, r30
 c32:	24 2f       	mov	r18, r20
 c34:	21 70       	andi	r18, 0x01	; 1
 c36:	30 e0       	ldi	r19, 0x00	; 0
 c38:	22 0f       	add	r18, r18
 c3a:	33 1f       	adc	r19, r19
 c3c:	22 0f       	add	r18, r18
 c3e:	33 1f       	adc	r19, r19
 c40:	22 0f       	add	r18, r18
 c42:	33 1f       	adc	r19, r19
 c44:	2e 2b       	or	r18, r30
 c46:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 c4a:	08 95       	ret

00000c4c <__adddi3_s8>:
 c4c:	00 24       	eor	r0, r0
 c4e:	a7 fd       	sbrc	r26, 7
 c50:	00 94       	com	r0
 c52:	2a 0f       	add	r18, r26
 c54:	30 1d       	adc	r19, r0
 c56:	40 1d       	adc	r20, r0
 c58:	50 1d       	adc	r21, r0
 c5a:	60 1d       	adc	r22, r0
 c5c:	70 1d       	adc	r23, r0
 c5e:	80 1d       	adc	r24, r0
 c60:	90 1d       	adc	r25, r0
 c62:	08 95       	ret

00000c64 <_exit>:
 c64:	f8 94       	cli

00000c66 <__stop_program>:
 c66:	ff cf       	rjmp	.-2      	; 0xc66 <__stop_program>
