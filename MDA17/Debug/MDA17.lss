
MDA17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011e  00800100  00800100  00000c22  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004228  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017c1  00000000  00000000  000051b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015cd  00000000  00000000  00006975  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000658  00000000  00000000  00007f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d4e  00000000  00000000  0000859c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001064  00000000  00000000  000092ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000a34e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_7>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_14>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_21>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
	...

00000088 <_mcp2515_cnf>:
  88:	04 b6 e7 04 b6 d3 04 b6 c7 04 b6 c3 02 90 07 03     ................
  98:	ac 81 03 ac 80 02 90 00                             ........

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	d8 e0       	ldi	r29, 0x08	; 8
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <wdt_first>:
/**
 * @brief Clear SREG_I on hardware reset.
 */
void wdt_first(void)
{
    MCUSR = 0; // clear reset flags
  ac:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	a8 95       	wdr
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  b8:	88 61       	ori	r24, 0x18	; 24
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  c2:	0f be       	out	0x3f, r0	; 63

000000c4 <__do_clear_bss>:
  c4:	22 e0       	ldi	r18, 0x02	; 2
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	ae 31       	cpi	r26, 0x1E	; 30
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 62 05 	call	0xac4	; 0xac4 <main>
  d8:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_default>

000000e0 <mcp2515_write_register>:
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	18 2f       	mov	r17, r24
  ee:	2a 98       	cbi	0x05, 2	; 5
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	69 83       	std	Y+1, r22	; 0x01
  f4:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
  f8:	81 2f       	mov	r24, r17
  fa:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
  fe:	69 81       	ldd	r22, Y+1	; 0x01
 100:	86 2f       	mov	r24, r22
 102:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 106:	2a 9a       	sbi	0x05, 2	; 5
 108:	0f 90       	pop	r0
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	08 95       	ret

00000112 <mcp2515_read_register>:
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
 116:	2a 98       	cbi	0x05, 2	; 5
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 11e:	8c 2f       	mov	r24, r28
 120:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 12a:	2a 9a       	sbi	0x05, 2	; 5
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <mcp2515_bit_modify>:
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <mcp2515_bit_modify+0x8>
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	18 2f       	mov	r17, r24
 13e:	2a 98       	cbi	0x05, 2	; 5
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	4a 83       	std	Y+2, r20	; 0x02
 144:	69 83       	std	Y+1, r22	; 0x01
 146:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 14a:	81 2f       	mov	r24, r17
 14c:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 150:	69 81       	ldd	r22, Y+1	; 0x01
 152:	86 2f       	mov	r24, r22
 154:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 158:	4a 81       	ldd	r20, Y+2	; 0x02
 15a:	84 2f       	mov	r24, r20
 15c:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 160:	2a 9a       	sbi	0x05, 2	; 5
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	08 95       	ret

0000016e <mcp2515_read_status>:
 16e:	2a 98       	cbi	0x05, 2	; 5
 170:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 17a:	2a 9a       	sbi	0x05, 2	; 5
 17c:	08 95       	ret

0000017e <can_init>:
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	08 2f       	mov	r16, r24
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	10 f0       	brcs	.+4      	; 0x194 <can_init+0x16>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	5f c0       	rjmp	.+190    	; 0x252 <can_init+0xd4>
 194:	2a 9a       	sbi	0x05, 2	; 5
 196:	22 9a       	sbi	0x04, 2	; 4
 198:	2d 98       	cbi	0x05, 5	; 5
 19a:	2b 98       	cbi	0x05, 3	; 5
 19c:	2c 98       	cbi	0x05, 4	; 5
 19e:	25 9a       	sbi	0x04, 5	; 4
 1a0:	23 9a       	sbi	0x04, 3	; 4
 1a2:	24 98       	cbi	0x04, 4	; 4
 1a4:	0e 94 0d 02 	call	0x41a	; 0x41a <mcp2515_spi_init>
 1a8:	2a 98       	cbi	0x05, 2	; 5
 1aa:	80 ec       	ldi	r24, 0xC0	; 192
 1ac:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 1b0:	8f e9       	ldi	r24, 0x9F	; 159
 1b2:	9f e0       	ldi	r25, 0x0F	; 15
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <can_init+0x36>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <can_init+0x3c>
 1ba:	00 00       	nop
 1bc:	2a 9a       	sbi	0x05, 2	; 5
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	9c e9       	ldi	r25, 0x9C	; 156
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <can_init+0x44>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <can_init+0x4a>
 1c8:	00 00       	nop
 1ca:	2a 98       	cbi	0x05, 2	; 5
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 1d2:	88 e2       	ldi	r24, 0x28	; 40
 1d4:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	e8 01       	movw	r28, r16
 1dc:	cc 0f       	add	r28, r28
 1de:	dd 1f       	adc	r29, r29
 1e0:	c0 0f       	add	r28, r16
 1e2:	d1 1f       	adc	r29, r17
 1e4:	e1 2c       	mov	r14, r1
 1e6:	f1 2c       	mov	r15, r1
 1e8:	c8 57       	subi	r28, 0x78	; 120
 1ea:	df 4f       	sbci	r29, 0xFF	; 255
 1ec:	fe 01       	movw	r30, r28
 1ee:	ee 0d       	add	r30, r14
 1f0:	ff 1d       	adc	r31, r15
 1f2:	84 91       	lpm	r24, Z
 1f4:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 1f8:	9f ef       	ldi	r25, 0xFF	; 255
 1fa:	e9 1a       	sub	r14, r25
 1fc:	f9 0a       	sbc	r15, r25
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	e8 16       	cp	r14, r24
 202:	f1 04       	cpc	r15, r1
 204:	99 f7       	brne	.-26     	; 0x1ec <can_init+0x6e>
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 20c:	2a 9a       	sbi	0x05, 2	; 5
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	8d e0       	ldi	r24, 0x0D	; 13
 212:	0e 94 70 00 	call	0xe0	; 0xe0 <mcp2515_write_register>
 216:	20 98       	cbi	0x04, 0	; 4
 218:	28 9a       	sbi	0x05, 0	; 5
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8c e0       	ldi	r24, 0x0C	; 12
 21e:	0e 94 70 00 	call	0xe0	; 0xe0 <mcp2515_write_register>
 222:	89 e2       	ldi	r24, 0x29	; 41
 224:	0e 94 89 00 	call	0x112	; 0x112 <mcp2515_read_register>
 228:	d8 2f       	mov	r29, r24
 22a:	f8 01       	movw	r30, r16
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e0 0f       	add	r30, r16
 232:	f1 1f       	adc	r31, r17
 234:	e7 57       	subi	r30, 0x77	; 119
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	c4 91       	lpm	r28, Z
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	8f e0       	ldi	r24, 0x0F	; 15
 23e:	0e 94 70 00 	call	0xe0	; 0xe0 <mcp2515_write_register>
 242:	dc 13       	cpse	r29, r28
 244:	a5 cf       	rjmp	.-182    	; 0x190 <can_init+0x12>
 246:	8e e0       	ldi	r24, 0x0E	; 14
 248:	0e 94 89 00 	call	0x112	; 0x112 <mcp2515_read_register>
 24c:	80 7e       	andi	r24, 0xE0	; 224
 24e:	d9 f7       	brne	.-10     	; 0x246 <can_init+0xc8>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	08 95       	ret

00000260 <can_check_message>:
 260:	83 b1       	in	r24, 0x03	; 3
 262:	80 95       	com	r24
 264:	81 70       	andi	r24, 0x01	; 1
 266:	08 95       	ret

00000268 <can_check_free_buffer>:
 268:	80 ea       	ldi	r24, 0xA0	; 160
 26a:	0e 94 b7 00 	call	0x16e	; 0x16e <mcp2515_read_status>
 26e:	98 2f       	mov	r25, r24
 270:	94 75       	andi	r25, 0x54	; 84
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	94 35       	cpi	r25, 0x54	; 84
 276:	09 f4       	brne	.+2      	; 0x27a <can_check_free_buffer+0x12>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret

0000027c <can_get_message>:
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
 28c:	80 eb       	ldi	r24, 0xB0	; 176
 28e:	0e 94 b7 00 	call	0x16e	; 0x16e <mcp2515_read_status>
 292:	e8 2e       	mov	r14, r24
 294:	80 74       	andi	r24, 0x40	; 64
 296:	f8 2e       	mov	r15, r24
 298:	e6 fc       	sbrc	r14, 6
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <can_get_message+0x28>
 29c:	e7 fe       	sbrs	r14, 7
 29e:	43 c0       	rjmp	.+134    	; 0x326 <can_get_message+0xaa>
 2a0:	84 e9       	ldi	r24, 0x94	; 148
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <can_get_message+0x2a>
 2a4:	80 e9       	ldi	r24, 0x90	; 144
 2a6:	2a 98       	cbi	0x05, 2	; 5
 2a8:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 2ac:	ce 01       	movw	r24, r28
 2ae:	0e 94 d7 01 	call	0x3ae	; 0x3ae <mcp2515_read_id>
 2b2:	80 ff       	sbrs	r24, 0
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <can_get_message+0x58>
 2b6:	2a 9a       	sbi	0x05, 2	; 5
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	ff 20       	and	r15, r15
 2bc:	31 f0       	breq	.+12     	; 0x2ca <can_get_message+0x4e>
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	8c e2       	ldi	r24, 0x2C	; 44
 2c2:	0e 94 98 00 	call	0x130	; 0x130 <mcp2515_bit_modify>
 2c6:	f1 2c       	mov	r15, r1
 2c8:	2e c0       	rjmp	.+92     	; 0x326 <can_get_message+0xaa>
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	8c e2       	ldi	r24, 0x2C	; 44
 2ce:	0e 94 98 00 	call	0x130	; 0x130 <mcp2515_bit_modify>
 2d2:	29 c0       	rjmp	.+82     	; 0x326 <can_get_message+0xaa>
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 2da:	e3 fa       	bst	r14, 3
 2dc:	22 27       	eor	r18, r18
 2de:	20 f9       	bld	r18, 0
 2e0:	9a 81       	ldd	r25, Y+2	; 0x02
 2e2:	20 fb       	bst	r18, 0
 2e4:	90 f9       	bld	r25, 0
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	8f 70       	andi	r24, 0x0F	; 15
 2ea:	d8 2e       	mov	r13, r24
 2ec:	8b 83       	std	Y+3, r24	; 0x03
 2ee:	00 e0       	ldi	r16, 0x00	; 0
 2f0:	10 e0       	ldi	r17, 0x00	; 0
 2f2:	0d 15       	cp	r16, r13
 2f4:	50 f4       	brcc	.+20     	; 0x30a <can_get_message+0x8e>
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 2fc:	fe 01       	movw	r30, r28
 2fe:	e0 0f       	add	r30, r16
 300:	f1 1f       	adc	r31, r17
 302:	84 83       	std	Z+4, r24	; 0x04
 304:	0f 5f       	subi	r16, 0xFF	; 255
 306:	1f 4f       	sbci	r17, 0xFF	; 255
 308:	f4 cf       	rjmp	.-24     	; 0x2f2 <can_get_message+0x76>
 30a:	2a 9a       	sbi	0x05, 2	; 5
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	ff 20       	and	r15, r15
 310:	11 f0       	breq	.+4      	; 0x316 <can_get_message+0x9a>
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	01 c0       	rjmp	.+2      	; 0x318 <can_get_message+0x9c>
 316:	62 e0       	ldi	r22, 0x02	; 2
 318:	8c e2       	ldi	r24, 0x2C	; 44
 31a:	0e 94 98 00 	call	0x130	; 0x130 <mcp2515_bit_modify>
 31e:	8e 2d       	mov	r24, r14
 320:	87 70       	andi	r24, 0x07	; 7
 322:	f8 2e       	mov	r15, r24
 324:	f3 94       	inc	r15
 326:	8f 2d       	mov	r24, r15
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	df 90       	pop	r13
 336:	08 95       	ret

00000338 <can_static_filter>:
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	ec 01       	movw	r28, r24
 342:	40 e8       	ldi	r20, 0x80	; 128
 344:	60 ee       	ldi	r22, 0xE0	; 224
 346:	8f e0       	ldi	r24, 0x0F	; 15
 348:	0e 94 98 00 	call	0x130	; 0x130 <mcp2515_bit_modify>
 34c:	8e e0       	ldi	r24, 0x0E	; 14
 34e:	0e 94 89 00 	call	0x112	; 0x112 <mcp2515_read_register>
 352:	80 7e       	andi	r24, 0xE0	; 224
 354:	80 38       	cpi	r24, 0x80	; 128
 356:	d1 f7       	brne	.-12     	; 0x34c <can_static_filter+0x14>
 358:	64 e0       	ldi	r22, 0x04	; 4
 35a:	80 e6       	ldi	r24, 0x60	; 96
 35c:	0e 94 70 00 	call	0xe0	; 0xe0 <mcp2515_write_register>
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	80 e7       	ldi	r24, 0x70	; 112
 364:	0e 94 70 00 	call	0xe0	; 0xe0 <mcp2515_write_register>
 368:	10 e0       	ldi	r17, 0x00	; 0
 36a:	2a 98       	cbi	0x05, 2	; 5
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 372:	81 2f       	mov	r24, r17
 374:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 378:	00 e0       	ldi	r16, 0x00	; 0
 37a:	10 32       	cpi	r17, 0x20	; 32
 37c:	11 f4       	brne	.+4      	; 0x382 <can_static_filter+0x4a>
 37e:	08 30       	cpi	r16, 0x08	; 8
 380:	48 f4       	brcc	.+18     	; 0x394 <can_static_filter+0x5c>
 382:	21 96       	adiw	r28, 0x01	; 1
 384:	fe 01       	movw	r30, r28
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	84 91       	lpm	r24, Z
 38a:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 38e:	0f 5f       	subi	r16, 0xFF	; 255
 390:	0c 30       	cpi	r16, 0x0C	; 12
 392:	99 f7       	brne	.-26     	; 0x37a <can_static_filter+0x42>
 394:	2a 9a       	sbi	0x05, 2	; 5
 396:	10 5f       	subi	r17, 0xF0	; 240
 398:	10 33       	cpi	r17, 0x30	; 48
 39a:	39 f7       	brne	.-50     	; 0x36a <can_static_filter+0x32>
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	60 ee       	ldi	r22, 0xE0	; 224
 3a0:	8f e0       	ldi	r24, 0x0F	; 15
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	0c 94 98 00 	jmp	0x130	; 0x130 <mcp2515_bit_modify>

000003ae <mcp2515_read_id>:
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ec 01       	movw	r28, r24
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 3bc:	18 2f       	mov	r17, r24
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 3c4:	98 2f       	mov	r25, r24
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	93 ff       	sbrs	r25, 3
 3ca:	07 c0       	rjmp	.+14     	; 0x3da <mcp2515_read_id+0x2c>
 3cc:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	0e 94 12 02 	call	0x424	; 0x424 <spi_putc>
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	1c c0       	rjmp	.+56     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3da:	8e bd       	out	0x2e, r24	; 46
 3dc:	88 e0       	ldi	r24, 0x08	; 8
 3de:	18 9f       	mul	r17, r24
 3e0:	90 01       	movw	r18, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	39 83       	std	Y+1, r19	; 0x01
 3e6:	28 83       	st	Y, r18
 3e8:	0d b4       	in	r0, 0x2d	; 45
 3ea:	07 fe       	sbrs	r0, 7
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <mcp2515_read_id+0x3a>
 3ee:	8e b5       	in	r24, 0x2e	; 46
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	8e bd       	out	0x2e, r24	; 46
 3f4:	88 81       	ld	r24, Y
 3f6:	29 2f       	mov	r18, r25
 3f8:	22 95       	swap	r18
 3fa:	26 95       	lsr	r18
 3fc:	27 70       	andi	r18, 0x07	; 7
 3fe:	82 2b       	or	r24, r18
 400:	88 83       	st	Y, r24
 402:	0d b4       	in	r0, 0x2d	; 45
 404:	07 fe       	sbrs	r0, 7
 406:	fd cf       	rjmp	.-6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 408:	8e b5       	in	r24, 0x2e	; 46
 40a:	89 2f       	mov	r24, r25
 40c:	80 71       	andi	r24, 0x10	; 16
 40e:	94 fd       	sbrc	r25, 4
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	08 95       	ret

0000041a <mcp2515_spi_init>:
 41a:	81 e5       	ldi	r24, 0x51	; 81
 41c:	8c bd       	out	0x2c, r24	; 44
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	8d bd       	out	0x2d, r24	; 45
 422:	08 95       	ret

00000424 <spi_putc>:
 424:	8e bd       	out	0x2e, r24	; 46
 426:	0d b4       	in	r0, 0x2d	; 45
 428:	07 fe       	sbrs	r0, 7
 42a:	fd cf       	rjmp	.-6      	; 0x426 <spi_putc+0x2>
 42c:	8e b5       	in	r24, 0x2e	; 46
 42e:	08 95       	ret

00000430 <ma_adc0>:
 * Ma = (1/N)*Summation of x[i] from i=0 to N, 
 * if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
 *
 */
uint8_t ma_adc0(void)
{   
 430:	20 e2       	ldi	r18, 0x20	; 32
 432:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc0_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc0, i);
 438:	af ea       	ldi	r26, 0xAF	; 175
 43a:	b1 e0       	ldi	r27, 0x01	; 1
 43c:	4c 91       	ld	r20, X
 43e:	f9 01       	movw	r30, r18
 440:	e4 0f       	add	r30, r20
 442:	f1 1d       	adc	r31, r1
 444:	ef 71       	andi	r30, 0x1F	; 31
 446:	ff 27       	eor	r31, r31
 448:	e1 55       	subi	r30, 0x51	; 81
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	42 81       	ldd	r20, Z+2	; 0x02
 44e:	84 0f       	add	r24, r20
 450:	91 1d       	adc	r25, r1
 452:	21 50       	subi	r18, 0x01	; 1
 454:	31 09       	sbc	r19, r1
 *
 */
uint8_t ma_adc0(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc0_SIZE; i; i--){
 456:	91 f7       	brne	.-28     	; 0x43c <ma_adc0+0xc>
        sum += CBUF_Get(cbuf_adc0, i);
    }
    avg_adc0 = sum >> cbuf_adc0_SIZE_2;
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	92 95       	swap	r25
 45e:	82 95       	swap	r24
 460:	8f 70       	andi	r24, 0x0F	; 15
 462:	89 27       	eor	r24, r25
 464:	9f 70       	andi	r25, 0x0F	; 15
 466:	89 27       	eor	r24, r25
 468:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <avg_adc0>
    return avg_adc0;
}
 46c:	08 95       	ret

0000046e <ma_adc1>:
* Ma = (1/N)*Summation of x[i] from i=0 to N, 
* if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
*
*/
uint8_t ma_adc1(void)
{   
 46e:	20 e2       	ldi	r18, 0x20	; 32
 470:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc1_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc1, i);
 476:	a3 e2       	ldi	r26, 0x23	; 35
 478:	b1 e0       	ldi	r27, 0x01	; 1
 47a:	4c 91       	ld	r20, X
 47c:	f9 01       	movw	r30, r18
 47e:	e4 0f       	add	r30, r20
 480:	f1 1d       	adc	r31, r1
 482:	ef 71       	andi	r30, 0x1F	; 31
 484:	ff 27       	eor	r31, r31
 486:	ed 5d       	subi	r30, 0xDD	; 221
 488:	fe 4f       	sbci	r31, 0xFE	; 254
 48a:	42 81       	ldd	r20, Z+2	; 0x02
 48c:	84 0f       	add	r24, r20
 48e:	91 1d       	adc	r25, r1
 490:	21 50       	subi	r18, 0x01	; 1
 492:	31 09       	sbc	r19, r1
*
*/
uint8_t ma_adc1(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc1_SIZE; i; i--){
 494:	91 f7       	brne	.-28     	; 0x47a <ma_adc1+0xc>
        sum += CBUF_Get(cbuf_adc1, i);
    }
    avg_adc1 = sum >> cbuf_adc1_SIZE_2;
 496:	96 95       	lsr	r25
 498:	87 95       	ror	r24
 49a:	92 95       	swap	r25
 49c:	82 95       	swap	r24
 49e:	8f 70       	andi	r24, 0x0F	; 15
 4a0:	89 27       	eor	r24, r25
 4a2:	9f 70       	andi	r25, 0x0F	; 15
 4a4:	89 27       	eor	r24, r25
 4a6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <avg_adc1>
    return avg_adc1;
}
 4aa:	08 95       	ret

000004ac <ma_adc2>:
* Ma = (1/N)*Summation of x[i] from i=0 to N, 
* if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
*
*/
uint8_t ma_adc2(void)
{   
 4ac:	20 e2       	ldi	r18, 0x20	; 32
 4ae:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc2_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc2, i);
 4b4:	a6 e4       	ldi	r26, 0x46	; 70
 4b6:	b1 e0       	ldi	r27, 0x01	; 1
 4b8:	4c 91       	ld	r20, X
 4ba:	f9 01       	movw	r30, r18
 4bc:	e4 0f       	add	r30, r20
 4be:	f1 1d       	adc	r31, r1
 4c0:	ef 71       	andi	r30, 0x1F	; 31
 4c2:	ff 27       	eor	r31, r31
 4c4:	ea 5b       	subi	r30, 0xBA	; 186
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	42 81       	ldd	r20, Z+2	; 0x02
 4ca:	84 0f       	add	r24, r20
 4cc:	91 1d       	adc	r25, r1
 4ce:	21 50       	subi	r18, 0x01	; 1
 4d0:	31 09       	sbc	r19, r1
*
*/
uint8_t ma_adc2(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc2_SIZE; i; i--){
 4d2:	91 f7       	brne	.-28     	; 0x4b8 <ma_adc2+0xc>
        sum += CBUF_Get(cbuf_adc2, i);
    }
    avg_adc2 = sum >> cbuf_adc2_SIZE_2;
 4d4:	96 95       	lsr	r25
 4d6:	87 95       	ror	r24
 4d8:	92 95       	swap	r25
 4da:	82 95       	swap	r24
 4dc:	8f 70       	andi	r24, 0x0F	; 15
 4de:	89 27       	eor	r24, r25
 4e0:	9f 70       	andi	r25, 0x0F	; 15
 4e2:	89 27       	eor	r24, r25
 4e4:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <avg_adc2>
    return avg_adc2;
}
 4e8:	08 95       	ret

000004ea <ma_adc3>:
 * Ma = (1/N)*Summation of x[i] from i=0 to N, 
 * if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
 *
 */
uint8_t ma_adc3(void)
{   
 4ea:	20 e2       	ldi	r18, 0x20	; 32
 4ec:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc3_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc3, i);
 4f2:	ad e8       	ldi	r26, 0x8D	; 141
 4f4:	b1 e0       	ldi	r27, 0x01	; 1
 4f6:	4c 91       	ld	r20, X
 4f8:	f9 01       	movw	r30, r18
 4fa:	e4 0f       	add	r30, r20
 4fc:	f1 1d       	adc	r31, r1
 4fe:	ef 71       	andi	r30, 0x1F	; 31
 500:	ff 27       	eor	r31, r31
 502:	e3 57       	subi	r30, 0x73	; 115
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	42 81       	ldd	r20, Z+2	; 0x02
 508:	84 0f       	add	r24, r20
 50a:	91 1d       	adc	r25, r1
 50c:	21 50       	subi	r18, 0x01	; 1
 50e:	31 09       	sbc	r19, r1
 *
 */
uint8_t ma_adc3(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc3_SIZE; i; i--){
 510:	91 f7       	brne	.-28     	; 0x4f6 <ma_adc3+0xc>
        sum += CBUF_Get(cbuf_adc3, i);
    }
    avg_adc3 = sum >> cbuf_adc3_SIZE_2;
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	92 95       	swap	r25
 518:	82 95       	swap	r24
 51a:	8f 70       	andi	r24, 0x0F	; 15
 51c:	89 27       	eor	r24, r25
 51e:	9f 70       	andi	r25, 0x0F	; 15
 520:	89 27       	eor	r24, r25
 522:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <avg_adc3>
    return avg_adc3;
}
 526:	08 95       	ret

00000528 <ma_adc4>:
 * Ma = (1/N)*Summation of x[i] from i=0 to N, 
 * if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
 *
 */
uint8_t ma_adc4(void)
{   
 528:	20 e2       	ldi	r18, 0x20	; 32
 52a:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc4_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc4, i);
 530:	a9 e6       	ldi	r26, 0x69	; 105
 532:	b1 e0       	ldi	r27, 0x01	; 1
 534:	4c 91       	ld	r20, X
 536:	f9 01       	movw	r30, r18
 538:	e4 0f       	add	r30, r20
 53a:	f1 1d       	adc	r31, r1
 53c:	ef 71       	andi	r30, 0x1F	; 31
 53e:	ff 27       	eor	r31, r31
 540:	e7 59       	subi	r30, 0x97	; 151
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	42 81       	ldd	r20, Z+2	; 0x02
 546:	84 0f       	add	r24, r20
 548:	91 1d       	adc	r25, r1
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	31 09       	sbc	r19, r1
 *
 */
uint8_t ma_adc4(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc4_SIZE; i; i--){
 54e:	91 f7       	brne	.-28     	; 0x534 <ma_adc4+0xc>
        sum += CBUF_Get(cbuf_adc4, i);
    }
    avg_adc4 = sum >> cbuf_adc4_SIZE_2;
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	92 95       	swap	r25
 556:	82 95       	swap	r24
 558:	8f 70       	andi	r24, 0x0F	; 15
 55a:	89 27       	eor	r24, r25
 55c:	9f 70       	andi	r25, 0x0F	; 15
 55e:	89 27       	eor	r24, r25
 560:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <avg_adc4>
    return avg_adc4;
}
 564:	08 95       	ret

00000566 <ma_adc5>:
 * Ma = (1/N)*Summation of x[i] from i=0 to N, 
 * if N = 2^k, then Ma = (Summation of x[i] from i=0 to N) >> k
 *
 */
uint8_t ma_adc5(void)
{   
 566:	20 e2       	ldi	r18, 0x20	; 32
 568:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t sum = 0;
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
    for(uint8_t i = cbuf_adc5_SIZE; i; i--){
        sum += CBUF_Get(cbuf_adc5, i);
 56e:	a1 e0       	ldi	r26, 0x01	; 1
 570:	b1 e0       	ldi	r27, 0x01	; 1
 572:	4c 91       	ld	r20, X
 574:	f9 01       	movw	r30, r18
 576:	e4 0f       	add	r30, r20
 578:	f1 1d       	adc	r31, r1
 57a:	ef 71       	andi	r30, 0x1F	; 31
 57c:	ff 27       	eor	r31, r31
 57e:	ef 5f       	subi	r30, 0xFF	; 255
 580:	fe 4f       	sbci	r31, 0xFE	; 254
 582:	42 81       	ldd	r20, Z+2	; 0x02
 584:	84 0f       	add	r24, r20
 586:	91 1d       	adc	r25, r1
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	31 09       	sbc	r19, r1
 *
 */
uint8_t ma_adc5(void)
{   
    uint16_t sum = 0;
    for(uint8_t i = cbuf_adc5_SIZE; i; i--){
 58c:	91 f7       	brne	.-28     	; 0x572 <ma_adc5+0xc>
        sum += CBUF_Get(cbuf_adc5, i);
    }
    avg_adc5 = sum >> cbuf_adc5_SIZE_2;
 58e:	96 95       	lsr	r25
 590:	87 95       	ror	r24
 592:	92 95       	swap	r25
 594:	82 95       	swap	r24
 596:	8f 70       	andi	r24, 0x0F	; 15
 598:	89 27       	eor	r24, r25
 59a:	9f 70       	andi	r25, 0x0F	; 15
 59c:	89 27       	eor	r24, r25
 59e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <avg_adc5>
    return avg_adc5;
}
 5a2:	08 95       	ret

000005a4 <adc_select_channel>:
 * @brief Muda o canal do adc
 * @param __ch is the channel to be switched to
 * @return return the selected channel
 */
uint8_t adc_select_channel(adc_channels_t __ch)
{
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	1f 92       	push	r1
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	89 83       	std	Y+1, r24	; 0x01
    ADC_CHANNEL = __ch;
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    ADMUX = (ADMUX & 0xF8) | ADC_CHANNEL; // clears the bottom 3 bits before ORing
 5b6:	ec e7       	ldi	r30, 0x7C	; 124
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 5c0:	88 7f       	andi	r24, 0xF8	; 248
 5c2:	89 2b       	or	r24, r25
 5c4:	80 83       	st	Z, r24
    return ADC_CHANNEL;
 5c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
}
 5ca:	0f 90       	pop	r0
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <adc_init>:
 */
void adc_init(void)
{

    // configuracao do ADC
    PORTC   =   0b00000000;                         // pull-up for adcs
 5d2:	18 b8       	out	0x08, r1	; 8
    DDRC    =   0b00000000;                         // all adcs as inputs
 5d4:	17 b8       	out	0x07, r1	; 7
    DIDR0   =   0b00000111;                         // ADC0 to ADC2 as adc (digital disable)
 5d6:	87 e0       	ldi	r24, 0x07	; 7
 5d8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

    ADMUX   =   (0 << REFS1)                        // AVcc with external capacitor at AREF pin
 5dc:	80 e6       	ldi	r24, 0x60	; 96
 5de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
            | (1 << REFS0)
            | (1 << ADLAR);                         // ADC left adjusted -> using 8bits ADCH only

    ADCSRB  =   (0 << ADTS2)                        // Auto-trigger source: timer0 Compare Match A
 5e2:	83 e0       	ldi	r24, 0x03	; 3
 5e4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
            | (1 << ADTS1)
            | (1 << ADTS0);

    adc_select_channel(ADC1);                       // Choose admux
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <adc_select_channel>
    ADCSRA  =   (1 << ADATE)                        // ADC Auto Trigger Enable
 5ee:	8f ee       	ldi	r24, 0xEF	; 239
 5f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            | (1 << ADPS1)
            | (1 << ADPS0);


    // configuracao do Timer TC0 --> TIMER DO ADC
    TCCR0A  =   (1 << WGM01) | (0 << WGM00)         // Timer 0 in Mode 2 = CTC (clear on compare)
 5f4:	82 e0       	ldi	r24, 0x02	; 2
 5f6:	84 bd       	out	0x24, r24	; 36
            | (0 << COM0A1) | (0 << COM0A0)         // Normal port operation
            | (0 << COM0B1) | (0 << COM0B0);        // do nothing with OC0B
    TCCR0B  =   (0 << WGM02)                        // Timer 0 in Mode 2 = CTC (clear on compare)
 5f8:	84 e0       	ldi	r24, 0x04	; 4
 5fa:	85 bd       	out	0x25, r24	; 37
            | (0 << FOC0A) | (0 << FOC0B)           // dont force outputs
            | (1 << CS02)                           // clock enabled, prescaller = 256
            | (0 << CS01)
            | (0 << CS00);

	OCR0A  =    20;                                 // Valor para igualdade de comparacao A para frequencia de ~1500 Hz
 5fc:	84 e1       	ldi	r24, 0x14	; 20
 5fe:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |=   (1 << OCIE0A);                      // Ativa a interrupcao na igualdade de comparação do TC0 com OCR0A
 600:	ee e6       	ldi	r30, 0x6E	; 110
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	82 60       	ori	r24, 0x02	; 2
 608:	80 83       	st	Z, r24
 60a:	08 95       	ret

0000060c <__vector_21>:
}

/**
 * @brief MUX do ADC
 */
ISR(ADC_vect){
 60c:	1f 92       	push	r1
 60e:	0f 92       	push	r0
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	0f 92       	push	r0
 614:	11 24       	eor	r1, r1
 616:	2f 93       	push	r18
 618:	3f 93       	push	r19
 61a:	4f 93       	push	r20
 61c:	5f 93       	push	r21
 61e:	6f 93       	push	r22
 620:	7f 93       	push	r23
 622:	8f 93       	push	r24
 624:	9f 93       	push	r25
 626:	af 93       	push	r26
 628:	bf 93       	push	r27
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31
    switch(ADC_CHANNEL){
 62e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	09 f4       	brne	.+2      	; 0x638 <__vector_21+0x2c>
 636:	3f c0       	rjmp	.+126    	; 0x6b6 <__vector_21+0xaa>
 638:	28 f4       	brcc	.+10     	; 0x644 <__vector_21+0x38>
 63a:	88 23       	and	r24, r24
 63c:	61 f0       	breq	.+24     	; 0x656 <__vector_21+0x4a>
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	11 f1       	breq	.+68     	; 0x686 <__vector_21+0x7a>
 642:	93 c0       	rjmp	.+294    	; 0x76a <__vector_21+0x15e>
 644:	84 30       	cpi	r24, 0x04	; 4
 646:	09 f4       	brne	.+2      	; 0x64a <__vector_21+0x3e>
 648:	66 c0       	rjmp	.+204    	; 0x716 <__vector_21+0x10a>
 64a:	08 f4       	brcc	.+2      	; 0x64e <__vector_21+0x42>
 64c:	4c c0       	rjmp	.+152    	; 0x6e6 <__vector_21+0xda>
 64e:	85 30       	cpi	r24, 0x05	; 5
 650:	09 f4       	brne	.+2      	; 0x654 <__vector_21+0x48>
 652:	79 c0       	rjmp	.+242    	; 0x746 <__vector_21+0x13a>
 654:	8a c0       	rjmp	.+276    	; 0x76a <__vector_21+0x15e>
        case ADC0:
            CBUF_Push(cbuf_adc0, ADCH); 
 656:	af ea       	ldi	r26, 0xAF	; 175
 658:	b1 e0       	ldi	r27, 0x01	; 1
 65a:	11 96       	adiw	r26, 0x01	; 1
 65c:	ec 91       	ld	r30, X
 65e:	11 97       	sbiw	r26, 0x01	; 1
 660:	ef 71       	andi	r30, 0x1F	; 31
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 668:	e1 55       	subi	r30, 0x51	; 81
 66a:	fe 4f       	sbci	r31, 0xFE	; 254
 66c:	82 83       	std	Z+2, r24	; 0x02
 66e:	11 96       	adiw	r26, 0x01	; 1
 670:	8c 91       	ld	r24, X
 672:	11 97       	sbiw	r26, 0x01	; 1
 674:	8f 5f       	subi	r24, 0xFF	; 255
 676:	11 96       	adiw	r26, 0x01	; 1
 678:	8c 93       	st	X, r24
            ADC_CHANNEL++;
 67a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 67e:	8f 5f       	subi	r24, 0xFF	; 255
 680:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 684:	74 c0       	rjmp	.+232    	; 0x76e <__vector_21+0x162>
        case ADC1:
            CBUF_Push(cbuf_adc1, ADCH); 
 686:	a3 e2       	ldi	r26, 0x23	; 35
 688:	b1 e0       	ldi	r27, 0x01	; 1
 68a:	11 96       	adiw	r26, 0x01	; 1
 68c:	ec 91       	ld	r30, X
 68e:	11 97       	sbiw	r26, 0x01	; 1
 690:	ef 71       	andi	r30, 0x1F	; 31
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 698:	ed 5d       	subi	r30, 0xDD	; 221
 69a:	fe 4f       	sbci	r31, 0xFE	; 254
 69c:	82 83       	std	Z+2, r24	; 0x02
 69e:	11 96       	adiw	r26, 0x01	; 1
 6a0:	8c 91       	ld	r24, X
 6a2:	11 97       	sbiw	r26, 0x01	; 1
 6a4:	8f 5f       	subi	r24, 0xFF	; 255
 6a6:	11 96       	adiw	r26, 0x01	; 1
 6a8:	8c 93       	st	X, r24
            ADC_CHANNEL++;
 6aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 6b4:	5c c0       	rjmp	.+184    	; 0x76e <__vector_21+0x162>
        case ADC2:
            CBUF_Push(cbuf_adc2, ADCH);
 6b6:	a6 e4       	ldi	r26, 0x46	; 70
 6b8:	b1 e0       	ldi	r27, 0x01	; 1
 6ba:	11 96       	adiw	r26, 0x01	; 1
 6bc:	ec 91       	ld	r30, X
 6be:	11 97       	sbiw	r26, 0x01	; 1
 6c0:	ef 71       	andi	r30, 0x1F	; 31
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 6c8:	ea 5b       	subi	r30, 0xBA	; 186
 6ca:	fe 4f       	sbci	r31, 0xFE	; 254
 6cc:	82 83       	std	Z+2, r24	; 0x02
 6ce:	11 96       	adiw	r26, 0x01	; 1
 6d0:	8c 91       	ld	r24, X
 6d2:	11 97       	sbiw	r26, 0x01	; 1
 6d4:	8f 5f       	subi	r24, 0xFF	; 255
 6d6:	11 96       	adiw	r26, 0x01	; 1
 6d8:	8c 93       	st	X, r24
			ADC_CHANNEL++;
 6da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6de:	8f 5f       	subi	r24, 0xFF	; 255
 6e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 6e4:	44 c0       	rjmp	.+136    	; 0x76e <__vector_21+0x162>
		case ADC3:
			CBUF_Push(cbuf_adc3, ADCH);
 6e6:	ad e8       	ldi	r26, 0x8D	; 141
 6e8:	b1 e0       	ldi	r27, 0x01	; 1
 6ea:	11 96       	adiw	r26, 0x01	; 1
 6ec:	ec 91       	ld	r30, X
 6ee:	11 97       	sbiw	r26, 0x01	; 1
 6f0:	ef 71       	andi	r30, 0x1F	; 31
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 6f8:	e3 57       	subi	r30, 0x73	; 115
 6fa:	fe 4f       	sbci	r31, 0xFE	; 254
 6fc:	82 83       	std	Z+2, r24	; 0x02
 6fe:	11 96       	adiw	r26, 0x01	; 1
 700:	8c 91       	ld	r24, X
 702:	11 97       	sbiw	r26, 0x01	; 1
 704:	8f 5f       	subi	r24, 0xFF	; 255
 706:	11 96       	adiw	r26, 0x01	; 1
 708:	8c 93       	st	X, r24
			ADC_CHANNEL++;
 70a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 70e:	8f 5f       	subi	r24, 0xFF	; 255
 710:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 714:	2c c0       	rjmp	.+88     	; 0x76e <__vector_21+0x162>
		case ADC4:
			CBUF_Push(cbuf_adc4, ADCH);
 716:	a9 e6       	ldi	r26, 0x69	; 105
 718:	b1 e0       	ldi	r27, 0x01	; 1
 71a:	11 96       	adiw	r26, 0x01	; 1
 71c:	ec 91       	ld	r30, X
 71e:	11 97       	sbiw	r26, 0x01	; 1
 720:	ef 71       	andi	r30, 0x1F	; 31
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 728:	e7 59       	subi	r30, 0x97	; 151
 72a:	fe 4f       	sbci	r31, 0xFE	; 254
 72c:	82 83       	std	Z+2, r24	; 0x02
 72e:	11 96       	adiw	r26, 0x01	; 1
 730:	8c 91       	ld	r24, X
 732:	11 97       	sbiw	r26, 0x01	; 1
 734:	8f 5f       	subi	r24, 0xFF	; 255
 736:	11 96       	adiw	r26, 0x01	; 1
 738:	8c 93       	st	X, r24
			ADC_CHANNEL++;
 73a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 73e:	8f 5f       	subi	r24, 0xFF	; 255
 740:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 744:	14 c0       	rjmp	.+40     	; 0x76e <__vector_21+0x162>
		case ADC5:
			CBUF_Push(cbuf_adc5, ADCH);
 746:	a1 e0       	ldi	r26, 0x01	; 1
 748:	b1 e0       	ldi	r27, 0x01	; 1
 74a:	11 96       	adiw	r26, 0x01	; 1
 74c:	ec 91       	ld	r30, X
 74e:	11 97       	sbiw	r26, 0x01	; 1
 750:	ef 71       	andi	r30, 0x1F	; 31
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 758:	ef 5f       	subi	r30, 0xFF	; 255
 75a:	fe 4f       	sbci	r31, 0xFE	; 254
 75c:	82 83       	std	Z+2, r24	; 0x02
 75e:	11 96       	adiw	r26, 0x01	; 1
 760:	8c 91       	ld	r24, X
 762:	11 97       	sbiw	r26, 0x01	; 1
 764:	8f 5f       	subi	r24, 0xFF	; 255
 766:	11 96       	adiw	r26, 0x01	; 1
 768:	8c 93       	st	X, r24
			//break;
        default:
            ADC_CHANNEL = ADC0;             // recycles
 76a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
            break;
    }        
    adc_select_channel(ADC_CHANNEL);
 76e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 772:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <adc_select_channel>
}
 776:	ff 91       	pop	r31
 778:	ef 91       	pop	r30
 77a:	bf 91       	pop	r27
 77c:	af 91       	pop	r26
 77e:	9f 91       	pop	r25
 780:	8f 91       	pop	r24
 782:	7f 91       	pop	r23
 784:	6f 91       	pop	r22
 786:	5f 91       	pop	r21
 788:	4f 91       	pop	r20
 78a:	3f 91       	pop	r19
 78c:	2f 91       	pop	r18
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <__vector_14>:
 
/**
 * @brief ISR necessária para auto-trigger do ADC. Caso contrário, dispara
 * BADISR_vect.
 */
EMPTY_INTERRUPT(TIMER0_COMPA_vect);
 798:	18 95       	reti

0000079a <calculate_check_sum>:
   @param *data is a int pointer to the prealocated data
   @param dataLenght is the length of data
   @param checkSumByte indicates where the check sum byte is in the data
*/
uint8_t calculate_check_sum(uint8_t *bytes, int8_t dataLenght)
{
 79a:	dc 01       	movw	r26, r24
  uint16_t sum = 0;
  uint8_t *bytes_start = bytes;     // keeps the pointer reference
  for (dataLenght -= 1; dataLenght >= 0; dataLenght--) {
 79c:	61 50       	subi	r22, 0x01	; 1
 79e:	a2 f0       	brmi	.+40     	; 0x7c8 <calculate_check_sum+0x2e>
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	30 e0       	ldi	r19, 0x00	; 0
    if (((sum += bytes[dataLenght]) & 0xFF00) != 0) {
 7a4:	fd 01       	movw	r30, r26
 7a6:	e6 0f       	add	r30, r22
 7a8:	f1 1d       	adc	r31, r1
 7aa:	67 fd       	sbrc	r22, 7
 7ac:	fa 95       	dec	r31
 7ae:	90 81       	ld	r25, Z
 7b0:	29 0f       	add	r18, r25
 7b2:	31 1d       	adc	r19, r1
 7b4:	a9 01       	movw	r20, r18
 7b6:	44 27       	eor	r20, r20
 7b8:	45 2b       	or	r20, r21
 7ba:	19 f0       	breq	.+6      	; 0x7c2 <calculate_check_sum+0x28>
      sum = (uint16_t)((~sum) & 0xFF); // ones' complement
 7bc:	20 95       	com	r18
 7be:	30 95       	com	r19
 7c0:	33 27       	eor	r19, r19
 7c2:	61 50       	subi	r22, 0x01	; 1
*/
uint8_t calculate_check_sum(uint8_t *bytes, int8_t dataLenght)
{
  uint16_t sum = 0;
  uint8_t *bytes_start = bytes;     // keeps the pointer reference
  for (dataLenght -= 1; dataLenght >= 0; dataLenght--) {
 7c4:	7a f7       	brpl	.-34     	; 0x7a4 <calculate_check_sum+0xa>
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <calculate_check_sum+0x32>
   @param dataLenght is the length of data
   @param checkSumByte indicates where the check sum byte is in the data
*/
uint8_t calculate_check_sum(uint8_t *bytes, int8_t dataLenght)
{
  uint16_t sum = 0;
 7c8:	20 e0       	ldi	r18, 0x00	; 0
 7ca:	30 e0       	ldi	r19, 0x00	; 0
    }
  }
  bytes = bytes_start;              // takes back the pointer reference

  return (uint8_t) (sum & 0xFF);
}
 7cc:	82 2f       	mov	r24, r18
 7ce:	08 95       	ret

000007d0 <bt_send_package>:

#include "bt.h"
#include "machine.h"

void bt_send_package(void)
{
 7d0:	df 92       	push	r13
 7d2:	ef 92       	push	r14
 7d4:	ff 92       	push	r15
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
  mpackage.header = 0xFFFFFFFF;
 7de:	c8 ee       	ldi	r28, 0xE8	; 232
 7e0:	d1 e0       	ldi	r29, 0x01	; 1
 7e2:	8f ef       	ldi	r24, 0xFF	; 255
 7e4:	9f ef       	ldi	r25, 0xFF	; 255
 7e6:	dc 01       	movw	r26, r24
 7e8:	88 83       	st	Y, r24
 7ea:	99 83       	std	Y+1, r25	; 0x01
 7ec:	aa 83       	std	Y+2, r26	; 0x02
 7ee:	bb 83       	std	Y+3, r27	; 0x03
  mpackage.timestamp = timestamp++;
 7f0:	d0 90 0c 02 	lds	r13, 0x020C	; 0x80020c <timestamp>
 7f4:	e0 90 0d 02 	lds	r14, 0x020D	; 0x80020d <timestamp+0x1>
 7f8:	f0 90 0e 02 	lds	r15, 0x020E	; 0x80020e <timestamp+0x2>
 7fc:	00 91 0f 02 	lds	r16, 0x020F	; 0x80020f <timestamp+0x3>
 800:	10 91 10 02 	lds	r17, 0x0210	; 0x800210 <timestamp+0x4>
 804:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timestamp+0x5>
 808:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <timestamp+0x6>
 80c:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <timestamp+0x7>
 810:	2d 2d       	mov	r18, r13
 812:	3e 2d       	mov	r19, r14
 814:	4f 2d       	mov	r20, r15
 816:	50 2f       	mov	r21, r16
 818:	61 2f       	mov	r22, r17
 81a:	7b 2f       	mov	r23, r27
 81c:	8f 2f       	mov	r24, r31
 81e:	9e 2f       	mov	r25, r30
 820:	a1 e0       	ldi	r26, 0x01	; 1
 822:	0e 94 c9 05 	call	0xb92	; 0xb92 <__adddi3_s8>
 826:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <timestamp>
 82a:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <timestamp+0x1>
 82e:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <timestamp+0x2>
 832:	50 93 0f 02 	sts	0x020F, r21	; 0x80020f <timestamp+0x3>
 836:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <timestamp+0x4>
 83a:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <timestamp+0x5>
 83e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <timestamp+0x6>
 842:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <timestamp+0x7>
 846:	dc 82       	std	Y+4, r13	; 0x04
 848:	ed 82       	std	Y+5, r14	; 0x05
 84a:	fe 82       	std	Y+6, r15	; 0x06
 84c:	0f 83       	std	Y+7, r16	; 0x07
 84e:	18 87       	std	Y+8, r17	; 0x08
 850:	b9 87       	std	Y+9, r27	; 0x09
 852:	fa 87       	std	Y+10, r31	; 0x0a
 854:	eb 87       	std	Y+11, r30	; 0x0b
  mpackage.dataSize = 20;           // size in bytes
 856:	84 e1       	ldi	r24, 0x14	; 20
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	9d 87       	std	Y+13, r25	; 0x0d
 85c:	8c 87       	std	Y+12, r24	; 0x0c
  mpackage.data.InputCurrent = control.InCurrent;
 85e:	e3 ed       	ldi	r30, 0xD3	; 211
 860:	f1 e0       	ldi	r31, 0x01	; 1
 862:	83 89       	ldd	r24, Z+19	; 0x13
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	99 8b       	std	Y+17, r25	; 0x11
 868:	88 8b       	std	Y+16, r24	; 0x10
  mpackage.data.OutputCurrent = control.OutCurrent;
 86a:	84 89       	ldd	r24, Z+20	; 0x14
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	9b 8b       	std	Y+19, r25	; 0x13
 870:	8a 8b       	std	Y+18, r24	; 0x12
  mpackage.data.MotorVoltage = control.MotorVoltage;
 872:	81 89       	ldd	r24, Z+17	; 0x11
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	9d 8b       	std	Y+21, r25	; 0x15
 878:	8c 8b       	std	Y+20, r24	; 0x14
  mpackage.data.BatteryVoltage = control.BatteryVoltage;
 87a:	87 85       	ldd	r24, Z+15	; 0x0f
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	9f 8b       	std	Y+23, r25	; 0x17
 880:	8e 8b       	std	Y+22, r24	; 0x16
  mpackage.data.MotorTemperature = control.MotorTemperature;
 882:	80 89       	ldd	r24, Z+16	; 0x10
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	99 8f       	std	Y+25, r25	; 0x19
 888:	88 8f       	std	Y+24, r24	; 0x18
  mpackage.data.BatteryTemperature = control.BatteryTemperature;
 88a:	82 89       	ldd	r24, Z+18	; 0x12
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	9b 8f       	std	Y+27, r25	; 0x1b
 890:	8a 8f       	std	Y+26, r24	; 0x1a
  mpackage.data.MotorRPM = 0;
 892:	1d 8e       	std	Y+29, r1	; 0x1d
 894:	1c 8e       	std	Y+28, r1	; 0x1c
  mpackage.data.WaterSpeed = 0;
 896:	1f 8e       	std	Y+31, r1	; 0x1f
 898:	1e 8e       	std	Y+30, r1	; 0x1e
  mpackage.data.Torque1 = 0;
 89a:	19 a2       	std	Y+33, r1	; 0x21
 89c:	18 a2       	std	Y+32, r1	; 0x20
  mpackage.data.Torque2 = 0;
 89e:	1b a2       	std	Y+35, r1	; 0x23
 8a0:	1a a2       	std	Y+34, r1	; 0x22
  mpackage.sum = calculate_check_sum( (uint8_t*) & (mpackage.data), sizeof(mpackage.data));
 8a2:	64 e1       	ldi	r22, 0x14	; 20
 8a4:	88 ef       	ldi	r24, 0xF8	; 248
 8a6:	91 e0       	ldi	r25, 0x01	; 1
 8a8:	0e 94 cd 03 	call	0x79a	; 0x79a <calculate_check_sum>
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	9f 87       	std	Y+15, r25	; 0x0f
 8b0:	8e 87       	std	Y+14, r24	; 0x0e

  usart_send_buffer((uint8_t*) &mpackage, sizeof(mpackage));
 8b2:	64 e2       	ldi	r22, 0x24	; 36
 8b4:	ce 01       	movw	r24, r28
 8b6:	0e 94 93 05 	call	0xb26	; 0xb26 <usart_send_buffer>
    Serial.print("\t");
    }
    Serial.println();
  */ 
 
}
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	1f 91       	pop	r17
 8c0:	0f 91       	pop	r16
 8c2:	ff 90       	pop	r15
 8c4:	ef 90       	pop	r14
 8c6:	df 90       	pop	r13
 8c8:	08 95       	ret

000008ca <can_app_extractor_mcc17_1_mppt>:
        control.I = msg->data[CAN_MSG_MAM17_MOTOR_LIM_BYTE];
    } 
}

void can_app_extractor_mcc17_1_mppt(can_t *msg){
	if (msg->data[CAN_SIGNATURE_BYTE] == CAN_SIGNATURE_MCC17_1)	{
 8ca:	fc 01       	movw	r30, r24
 8cc:	24 81       	ldd	r18, Z+4	; 0x04
 8ce:	2d 3d       	cpi	r18, 0xDD	; 221
 8d0:	19 f4       	brne	.+6      	; 0x8d8 <can_app_extractor_mcc17_1_mppt+0xe>
		control.MPPT_1_D = msg->data[CAN_MSG_MCC17_MPPT_IPANEL_BYTE];
 8d2:	86 81       	ldd	r24, Z+6	; 0x06
 8d4:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <control>
 8d8:	08 95       	ret

000008da <can_app_task>:

/**
* @brief Manages the canbus application protocol
*/
inline void can_app_task(void)
{
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	cd b7       	in	r28, 0x3d	; 61
 8e0:	de b7       	in	r29, 0x3e	; 62
 8e2:	2c 97       	sbiw	r28, 0x0c	; 12
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	f8 94       	cli
 8e8:	de bf       	out	0x3e, r29	; 62
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	cd bf       	out	0x3d, r28	; 61
        can_app_checks_without_mic17_msg = 0;
        error_flags.no_canbus = 1;
        set_state_error();
    } */
    
    if(can_check_message()){
 8ee:	0e 94 30 01 	call	0x260	; 0x260 <can_check_message>
 8f2:	88 23       	and	r24, r24
 8f4:	a1 f0       	breq	.+40     	; 0x91e <__stack+0x1f>
        can_t msg;
        if(can_get_message(&msg)){
 8f6:	ce 01       	movw	r24, r28
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	0e 94 3e 01 	call	0x27c	; 0x27c <can_get_message>
 8fe:	88 23       	and	r24, r24
 900:	71 f0       	breq	.+28     	; 0x91e <__stack+0x1f>
 * @brief redirects a specific message extractor to a given message
 * @param *msg pointer to the message to be extracted
 */
inline void can_app_msg_extractors_switch(can_t *msg)
{
    if(msg->data[CAN_SIGNATURE_BYTE] == CAN_SIGNATURE_MAM17){
 902:	8d 81       	ldd	r24, Y+5	; 0x05
 904:	8e 3b       	cpi	r24, 0xBE	; 190
 906:	29 f4       	brne	.+10     	; 0x912 <__stack+0x13>
        switch(msg->id){
 908:	29 81       	ldd	r18, Y+1	; 0x01
 90a:	3a 81       	ldd	r19, Y+2	; 0x02
 90c:	21 31       	cpi	r18, 0x11	; 17
 90e:	31 05       	cpc	r19, r1
 910:	31 f0       	breq	.+12     	; 0x91e <__stack+0x1f>
    }
	if(msg->data[CAN_SIGNATURE_BYTE] == CAN_SIGNATURE_MCS17){
		
	}
	
	if(msg->data[CAN_SIGNATURE_BYTE] == CAN_SIGNATURE_MCC17_1){
 912:	8d 3d       	cpi	r24, 0xDD	; 221
 914:	21 f4       	brne	.+8      	; 0x91e <__stack+0x1f>
		can_app_extractor_mcc17_1_mppt(msg);
 916:	ce 01       	movw	r24, r28
 918:	01 96       	adiw	r24, 0x01	; 1
 91a:	0e 94 65 04 	call	0x8ca	; 0x8ca <can_app_extractor_mcc17_1_mppt>
*/
inline void can_app_task(void)
{
    check_can();

    if(can_app_send_state_clk_div++ >= CAN_APP_SEND_STATE_CLK_DIV){
 91e:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <can_app_send_state_clk_div>
 922:	84 36       	cpi	r24, 0x64	; 100
 924:	20 f4       	brcc	.+8      	; 0x92e <__stack+0x2f>
 926:	8f 5f       	subi	r24, 0xFF	; 255
 928:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <can_app_send_state_clk_div>
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0x33>
        //VERBOSE_MSG_CAN_APP(usart_send_string("state msg was sent.\n"));
        
        can_app_send_state_clk_div = 0;
 92e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <can_app_send_state_clk_div>
    }

    if(can_app_send_motor_clk_div++ >= CAN_APP_SEND_MOTOR_CLK_DIV){
 932:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <can_app_send_motor_clk_div>
 936:	82 33       	cpi	r24, 0x32	; 50
 938:	20 f4       	brcc	.+8      	; 0x942 <__stack+0x43>
 93a:	8f 5f       	subi	r24, 0xFF	; 255
 93c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <can_app_send_motor_clk_div>
 940:	02 c0       	rjmp	.+4      	; 0x946 <__stack+0x47>
        //VERBOSE_MSG_CAN_APP(usart_send_string("motor msg was sent.\n"));
        //can_app_send_motor();
        can_app_send_motor_clk_div = 0;
 942:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <can_app_send_motor_clk_div>
    }

}
 946:	2c 96       	adiw	r28, 0x0c	; 12
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	f8 94       	cli
 94c:	de bf       	out	0x3e, r29	; 62
 94e:	0f be       	out	0x3f, r0	; 63
 950:	cd bf       	out	0x3d, r28	; 61
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	08 95       	ret

00000958 <machine_init>:
/**
* @brief set initializing state
*/ 
inline void set_state_initializing(void)
{
    state_machine = STATE_INITIALIZING;
 958:	82 e0       	ldi	r24, 0x02	; 2
 95a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 95e:	87 e0       	ldi	r24, 0x07	; 7
 960:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 964:	80 e5       	ldi	r24, 0x50	; 80
 966:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 96a:	e0 e7       	ldi	r30, 0x70	; 112
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	82 60       	ori	r24, 0x02	; 2
 972:	80 83       	st	Z, r24
 974:	08 95       	ret

00000976 <machine_run>:

/**
 * @brief this is the machine state itself.
 */
inline void machine_run(void)
{
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
	#ifdef CAN_ON
    can_app_task();
 97a:	0e 94 6d 04 	call	0x8da	; 0x8da <can_app_task>
	#endif
   // print_system_flags();
   // print_error_flags();
   // print_control();

    if(machine_clk){
 97e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <machine_clk>
 982:	88 23       	and	r24, r24
 984:	09 f4       	brne	.+2      	; 0x988 <machine_run+0x12>
 986:	7d c0       	rjmp	.+250    	; 0xa82 <machine_run+0x10c>
        machine_clk = 0;
 988:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <machine_clk>
        switch(state_machine){
 98c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <state_machine>
 990:	81 30       	cpi	r24, 0x01	; 1
 992:	21 f1       	breq	.+72     	; 0x9dc <machine_run+0x66>
 994:	30 f0       	brcs	.+12     	; 0x9a2 <machine_run+0x2c>
 996:	82 30       	cpi	r24, 0x02	; 2
 998:	99 f1       	breq	.+102    	; 0xa00 <machine_run+0x8a>
 99a:	83 30       	cpi	r24, 0x03	; 3
 99c:	09 f4       	brne	.+2      	; 0x9a0 <machine_run+0x2a>
 99e:	55 c0       	rjmp	.+170    	; 0xa4a <machine_run+0xd4>
 9a0:	70 c0       	rjmp	.+224    	; 0xa82 <machine_run+0x10c>
 *  - checks the temperature
 *
 */
inline void task_initializing(void)
{
    set_led();
 9a2:	5e 9a       	sbi	0x0b, 6	; 11
	timestamp = 0;
 9a4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <timestamp>
 9a8:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <timestamp+0x1>
 9ac:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <timestamp+0x2>
 9b0:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timestamp+0x3>
 9b4:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timestamp+0x4>
 9b8:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <timestamp+0x5>
 9bc:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timestamp+0x6>
 9c0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <timestamp+0x7>
    //check_buffers();
    //check_idle_current();
    //check_idle_voltage();
    //check_idle_temperature();
       
    if(!error_flags.all){
 9c4:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <error_flags>
 9c8:	81 11       	cpse	r24, r1
 9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <machine_run+0x5e>
/**
* @brief set idle state
*/ 
inline void set_state_idle(void)
{
    state_machine = STATE_IDLE;
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <state_machine>
 9d2:	57 c0       	rjmp	.+174    	; 0xa82 <machine_run+0x10c>
/**
 * @brief set error state
 */
inline void set_state_error(void)
{
    state_machine = STATE_ERROR;
 9d4:	83 e0       	ldi	r24, 0x03	; 3
 9d6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <state_machine>
 9da:	53 c0       	rjmp	.+166    	; 0xa82 <machine_run+0x10c>
 *  - checks the potentiometer state
 *  then if its ok, enable the system to operate
 */
inline void task_idle(void)
{
    if(led_clk_div++ >= 50){
 9dc:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <led_clk_div>
 9e0:	91 e0       	ldi	r25, 0x01	; 1
 9e2:	98 0f       	add	r25, r24
 9e4:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <led_clk_div>
 9e8:	82 33       	cpi	r24, 0x32	; 50
 9ea:	30 f0       	brcs	.+12     	; 0x9f8 <machine_run+0x82>
        cpl_led();
 9ec:	9b b1       	in	r25, 0x0b	; 11
 9ee:	80 e4       	ldi	r24, 0x40	; 64
 9f0:	89 27       	eor	r24, r25
 9f2:	8b b9       	out	0x0b, r24	; 11
        led_clk_div = 0;
 9f4:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <led_clk_div>
* @brief set running state
*/ 
inline void set_state_running(void)
{
    
    state_machine = STATE_RUNNING;
 9f8:	82 e0       	ldi	r24, 0x02	; 2
 9fa:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <state_machine>
 9fe:	41 c0       	rjmp	.+130    	; 0xa82 <machine_run+0x10c>
/**
 * @brief running task checks the system and apply the control action to pwm.
 */
inline void task_running(void)
{
    if(led_clk_div++ >= 10){
 a00:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <led_clk_div>
 a04:	91 e0       	ldi	r25, 0x01	; 1
 a06:	98 0f       	add	r25, r24
 a08:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <led_clk_div>
 a0c:	8a 30       	cpi	r24, 0x0A	; 10
 a0e:	30 f0       	brcs	.+12     	; 0xa1c <machine_run+0xa6>
        cpl_led();
 a10:	9b b1       	in	r25, 0x0b	; 11
 a12:	80 e4       	ldi	r24, 0x40	; 64
 a14:	89 27       	eor	r24, r25
 a16:	8b b9       	out	0x0b, r24	; 11
        led_clk_div = 0;
 a18:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <led_clk_div>
/**
 * @brief checks if the current level is ok for running state
 */
inline void check_running_OutCurrent(void)
{
   control.OutCurrent = ma_adc5(); 
 a1c:	0e 94 b3 02 	call	0x566	; 0x566 <ma_adc5>
 a20:	c3 ed       	ldi	r28, 0xD3	; 211
 a22:	d1 e0       	ldi	r29, 0x01	; 1
 a24:	8c 8b       	std	Y+20, r24	; 0x14

/**
 * @brief checks if the current level is ok for running state
 */
inline void check_running_InCurrent(void){
	control.InCurrent = ma_adc4();
 a26:	0e 94 94 02 	call	0x528	; 0x528 <ma_adc4>
 a2a:	8b 8b       	std	Y+19, r24	; 0x13
/**
 * @brief checks if the voltage level is ok for running state
 */
inline void check_running_BatteryTemperature(void)
{
	control.BatteryTemperature = ma_adc3();
 a2c:	0e 94 75 02 	call	0x4ea	; 0x4ea <ma_adc3>
 a30:	8a 8b       	std	Y+18, r24	; 0x12
/**
 * @brief checks if the temperature level is ok for running state
 */
inline void check_running_MotorVoltage(void)
{
    control.MotorVoltage = ma_adc2();
 a32:	0e 94 56 02 	call	0x4ac	; 0x4ac <ma_adc2>
 a36:	89 8b       	std	Y+17, r24	; 0x11
/**
 * @brief checks if the temperature level is ok for running state
 */
inline void check_running_MotorTemperature(void)
{
    control.MotorTemperature = ma_adc1();
 a38:	0e 94 37 02 	call	0x46e	; 0x46e <ma_adc1>
 a3c:	88 8b       	std	Y+16, r24	; 0x10
/**
* @brief checks if the temperature level is ok for running state
*/
inline void check_running_BatteryVoltage(void)
{
    control.BatteryVoltage = ma_adc0();
 a3e:	0e 94 18 02 	call	0x430	; 0x430 <ma_adc0>
 a42:	8f 87       	std	Y+15, r24	; 0x0f
    check_running_MotorVoltage();
	check_running_MotorTemperature();
	check_running_BatteryVoltage();
	
	//!<Envia os dados para o bluetooth	
	bt_send_package(); //!< Envia dados para o bluetooth
 a44:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <bt_send_package>
 a48:	1c c0       	rjmp	.+56     	; 0xa82 <machine_run+0x10c>
/**
 * @brief error task checks the system and tries to medicine it.
 */
inline void task_error(void)
{
    if(led_clk_div++ >= 5){
 a4a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <led_clk_div>
 a4e:	91 e0       	ldi	r25, 0x01	; 1
 a50:	98 0f       	add	r25, r24
 a52:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <led_clk_div>
 a56:	85 30       	cpi	r24, 0x05	; 5
 a58:	30 f0       	brcs	.+12     	; 0xa66 <machine_run+0xf0>
        cpl_led();
 a5a:	9b b1       	in	r25, 0x0b	; 11
 a5c:	80 e4       	ldi	r24, 0x40	; 64
 a5e:	89 27       	eor	r24, r25
 a60:	8b b9       	out	0x0b, r24	; 11
        led_clk_div = 0;
 a62:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <led_clk_div>
    }



    total_errors++;         // incrementa a contagem de erros
 a66:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <total_errors>
 a6a:	8f 5f       	subi	r24, 0xFF	; 255
 a6c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <total_errors>
    VERBOSE_MSG_ERROR(usart_send_char('\n'));
    
    if(total_errors < 2){
        VERBOSE_MSG_ERROR(usart_send_string("I will reset the machine state.\n"));
    }*/
    if(total_errors >= 20){
 a70:	84 31       	cpi	r24, 0x14	; 20
 a72:	08 f0       	brcs	.+2      	; 0xa76 <machine_run+0x100>
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <machine_run+0xfe>
        //VERBOSE_MSG_ERROR(usart_send_string("The watchdog will reset the whole system.\n"));
        for(;;);    // waits the watchdog to reset.
    }
    
    cpl_led();
 a76:	9b b1       	in	r25, 0x0b	; 11
 a78:	80 e4       	ldi	r24, 0x40	; 64
 a7a:	89 27       	eor	r24, r25
 a7c:	8b b9       	out	0x0b, r24	; 11
/**
* @brief set initializing state
*/ 
inline void set_state_initializing(void)
{
    state_machine = STATE_INITIALIZING;
 a7e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <state_machine>

            default:
                break;
        }
    }
}
 a82:	df 91       	pop	r29
 a84:	cf 91       	pop	r28
 a86:	08 95       	ret

00000a88 <__vector_7>:

/**
* @brief ISR para ações de controle
*/
ISR(TIMER2_COMPA_vect)
{
 a88:	1f 92       	push	r1
 a8a:	0f 92       	push	r0
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	0f 92       	push	r0
 a90:	11 24       	eor	r1, r1
 a92:	8f 93       	push	r24
    //VERBOSE_MSG_ERROR(if(machine_clk) usart_send_string("\nERROR: CLOCK CONFLICT!!!\n"));
	machine_clk = 1;
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <machine_clk>
}
 a9a:	8f 91       	pop	r24
 a9c:	0f 90       	pop	r0
 a9e:	0f be       	out	0x3f, r0	; 63
 aa0:	0f 90       	pop	r0
 aa2:	1f 90       	pop	r1
 aa4:	18 95       	reti

00000aa6 <wdt_init>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 aa6:	9f e0       	ldi	r25, 0x0F	; 15
 aa8:	88 e1       	ldi	r24, 0x18	; 24
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	f8 94       	cli
 aae:	a8 95       	wdr
 ab0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 aba:	08 95       	ret

00000abc <sleep_init>:
#include <avr/io.h>
#include <avr/sleep.h>

void sleep_init(void)
{
	set_sleep_mode(SLEEP_MODE_IDLE);
 abc:	83 b7       	in	r24, 0x33	; 51
 abe:	81 7f       	andi	r24, 0xF1	; 241
 ac0:	83 bf       	out	0x33, r24	; 51
 ac2:	08 95       	ret

00000ac4 <main>:
#include "main.h"

int main(void)
{
    #ifdef USART_ON
        usart_init(MYUBRR,1,1);                         // inicializa a usart
 ac4:	41 e0       	ldi	r20, 0x01	; 1
 ac6:	61 e0       	ldi	r22, 0x01	; 1
 ac8:	80 e1       	ldi	r24, 0x10	; 16
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 af 05 	call	0xb5e	; 0xb5e <usart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ad0:	2f ef       	ldi	r18, 0xFF	; 255
 ad2:	83 ed       	ldi	r24, 0xD3	; 211
 ad4:	90 e3       	ldi	r25, 0x30	; 48
 ad6:	21 50       	subi	r18, 0x01	; 1
 ad8:	80 40       	sbci	r24, 0x00	; 0
 ada:	90 40       	sbci	r25, 0x00	; 0
 adc:	e1 f7       	brne	.-8      	; 0xad6 <main+0x12>
 ade:	00 c0       	rjmp	.+0      	; 0xae0 <main+0x1c>
 ae0:	00 00       	nop

    _delay_ms(1000);

    #ifdef CAN_ON
        //VERBOSE_MSG_INIT(usart_send_string("CAN (125kbps)..."));
        can_init(BITRATE_500_KBPS);
 ae2:	86 e0       	ldi	r24, 0x06	; 6
 ae4:	0e 94 bf 00 	call	0x17e	; 0x17e <can_init>
        //VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
        //VERBOSE_MSG_INIT(usart_send_string("CAN filters..."));
        can_static_filter(can_filter);
 ae8:	88 e6       	ldi	r24, 0x68	; 104
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 94 9c 01 	call	0x338	; 0x338 <can_static_filter>
        //VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
    #endif

    #ifdef ADC_ON
        //VERBOSE_MSG_INIT(usart_send_string("ADC..."));
        adc_init();
 af0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <adc_init>
    #endif


    #ifdef SLEEP_ON 
        //VERBOSE_MSG_INIT(usart_send_string("SLEEP..."));
        sleep_init();
 af4:	0e 94 5e 05 	call	0xabc	; 0xabc <sleep_init>
        //VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
    #endif

    #ifdef WATCHDOG_ON
        //VERBOSE_MSG_INIT(usart_send_string("WATCHDOG..."));
        wdt_init();
 af8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <wdt_init>
        //VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
    #endif

 	#ifdef MACHINE_ON
        //VERBOSE_MSG_INIT(usart_send_string("MACHINE..."));
		machine_init();
 afc:	0e 94 ac 04 	call	0x958	; 0x958 <machine_init>
        //VERBOSE_MSG_INIT(usart_send_string(" OK!\n"));
	#endif
	
    set_bit(LED_DDR, LED);                      // LED como saída
 b00:	56 9a       	sbi	0x0a, 6	; 10
	//set_bit(EICRA, ISC10);                      // rising edge for int1
	//set_bit(EIMSK, INT0);                       // enables int1 interrupt
	//set_bit(EIFR, INTF0);                       // clears int0 interrupt
		
	
    sei();
 b02:	78 94       	sei
	
	for(;;){
		#ifdef WATCHDOG_ON
            wdt_reset();
 b04:	a8 95       	wdr
		#endif

        #ifdef MACHINE_ON
            machine_run();
 b06:	0e 94 bb 04 	call	0x976	; 0x976 <machine_run>
        #endif

		#ifdef SLEEP_ON
            sleep_mode();
 b0a:	83 b7       	in	r24, 0x33	; 51
 b0c:	81 60       	ori	r24, 0x01	; 1
 b0e:	83 bf       	out	0x33, r24	; 51
 b10:	88 95       	sleep
 b12:	83 b7       	in	r24, 0x33	; 51
 b14:	8e 7f       	andi	r24, 0xFE	; 254
 b16:	83 bf       	out	0x33, r24	; 51
 b18:	f5 cf       	rjmp	.-22     	; 0xb04 <main+0x40>

00000b1a <__vector_default>:

/**
 * @brief se em debug, fica chaveando os pinos de debugs até o reset do watchdog
 */
ISR(BADISR_vect)
{
 b1a:	1f 92       	push	r1
 b1c:	0f 92       	push	r0
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	0f 92       	push	r0
 b22:	11 24       	eor	r1, r1
 b24:	ff cf       	rjmp	.-2      	; 0xb24 <__vector_default+0xa>

00000b26 <usart_send_buffer>:

/**
 * @brief sends a buffer through serial. Max lenght is 255.
 */
inline void usart_send_buffer(uint8_t *b, uint8_t lenght)
{
 b26:	cf 93       	push	r28
 b28:	df 93       	push	r29
    uint8_t i = 0;
    while(i < lenght) usart_send_char(b[i++]);
 b2a:	66 23       	and	r22, r22
 b2c:	a9 f0       	breq	.+42     	; 0xb58 <usart_send_buffer+0x32>
 b2e:	dc 01       	movw	r26, r24
 b30:	61 50       	subi	r22, 0x01	; 1
 b32:	26 2f       	mov	r18, r22
 b34:	30 e0       	ldi	r19, 0x00	; 0
 b36:	2f 5f       	subi	r18, 0xFF	; 255
 b38:	3f 4f       	sbci	r19, 0xFF	; 255
 b3a:	ac 01       	movw	r20, r24
 b3c:	42 0f       	add	r20, r18
 b3e:	53 1f       	adc	r21, r19
 * @brief sends a char through serial
 * @param data will be sent trough serial
 */
inline void usart_send_char(char data)
{
    while(!(UCSR0A & (1<<UDRE0)));
 b40:	e0 ec       	ldi	r30, 0xC0	; 192
 b42:	f0 e0       	ldi	r31, 0x00	; 0
    UDR0 = data;
 b44:	c6 ec       	ldi	r28, 0xC6	; 198
 b46:	d0 e0       	ldi	r29, 0x00	; 0
 * @brief sends a buffer through serial. Max lenght is 255.
 */
inline void usart_send_buffer(uint8_t *b, uint8_t lenght)
{
    uint8_t i = 0;
    while(i < lenght) usart_send_char(b[i++]);
 b48:	2d 91       	ld	r18, X+
 * @brief sends a char through serial
 * @param data will be sent trough serial
 */
inline void usart_send_char(char data)
{
    while(!(UCSR0A & (1<<UDRE0)));
 b4a:	90 81       	ld	r25, Z
 b4c:	95 ff       	sbrs	r25, 5
 b4e:	fd cf       	rjmp	.-6      	; 0xb4a <usart_send_buffer+0x24>
    UDR0 = data;
 b50:	28 83       	st	Y, r18
 * @brief sends a buffer through serial. Max lenght is 255.
 */
inline void usart_send_buffer(uint8_t *b, uint8_t lenght)
{
    uint8_t i = 0;
    while(i < lenght) usart_send_char(b[i++]);
 b52:	a4 17       	cp	r26, r20
 b54:	b5 07       	cpc	r27, r21
 b56:	c1 f7       	brne	.-16     	; 0xb48 <usart_send_buffer+0x22>
}
 b58:	df 91       	pop	r29
 b5a:	cf 91       	pop	r28
 b5c:	08 95       	ret

00000b5e <usart_init>:
 * @endcode
 */
inline void usart_init(uint16_t ubrr, uint8_t rx, uint8_t tx)
{
    // set BAUDRATE
    UBRR0H = (uint8_t)(ubrr >>8);
 b5e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t)ubrr;
 b62:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    
    // Enable RX and TX
    UCSR0B = ((rx&1)<<RXEN0) | ((tx&1)<<TXEN0);
 b66:	e6 2f       	mov	r30, r22
 b68:	e1 70       	andi	r30, 0x01	; 1
 b6a:	f0 e0       	ldi	r31, 0x00	; 0
 b6c:	e2 95       	swap	r30
 b6e:	f2 95       	swap	r31
 b70:	f0 7f       	andi	r31, 0xF0	; 240
 b72:	fe 27       	eor	r31, r30
 b74:	e0 7f       	andi	r30, 0xF0	; 240
 b76:	fe 27       	eor	r31, r30
 b78:	24 2f       	mov	r18, r20
 b7a:	21 70       	andi	r18, 0x01	; 1
 b7c:	30 e0       	ldi	r19, 0x00	; 0
 b7e:	22 0f       	add	r18, r18
 b80:	33 1f       	adc	r19, r19
 b82:	22 0f       	add	r18, r18
 b84:	33 1f       	adc	r19, r19
 b86:	22 0f       	add	r18, r18
 b88:	33 1f       	adc	r19, r19
 b8a:	2e 2b       	or	r18, r30
 b8c:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 b90:	08 95       	ret

00000b92 <__adddi3_s8>:
 b92:	00 24       	eor	r0, r0
 b94:	a7 fd       	sbrc	r26, 7
 b96:	00 94       	com	r0
 b98:	2a 0f       	add	r18, r26
 b9a:	30 1d       	adc	r19, r0
 b9c:	40 1d       	adc	r20, r0
 b9e:	50 1d       	adc	r21, r0
 ba0:	60 1d       	adc	r22, r0
 ba2:	70 1d       	adc	r23, r0
 ba4:	80 1d       	adc	r24, r0
 ba6:	90 1d       	adc	r25, r0
 ba8:	08 95       	ret

00000baa <_exit>:
 baa:	f8 94       	cli

00000bac <__stop_program>:
 bac:	ff cf       	rjmp	.-2      	; 0xbac <__stop_program>
